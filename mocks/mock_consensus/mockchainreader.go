// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_consensus is a generated GoMock package.
package mock_consensus

import (
	config "github.com/QuarkChain/goquarkchain/cluster/config"
	types "github.com/QuarkChain/goquarkchain/core/types"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockChainReader is a mock of ChainReader interface
type MockChainReader struct {
	ctrl     *gomock.Controller
	recorder *MockChainReaderMockRecorder
}

// MockChainReaderMockRecorder is the mock recorder for MockChainReader
type MockChainReaderMockRecorder struct {
	mock *MockChainReader
}

// NewMockChainReader creates a new mock instance
func NewMockChainReader(ctrl *gomock.Controller) *MockChainReader {
	mock := &MockChainReader{ctrl: ctrl}
	mock.recorder = &MockChainReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainReader) EXPECT() *MockChainReaderMockRecorder {
	return m.recorder
}

// Config mocks base method
func (m *MockChainReader) Config() *config.QuarkChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.QuarkChainConfig)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockChainReaderMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockChainReader)(nil).Config))
}

// CurrentHeader mocks base method
func (m *MockChainReader) CurrentHeader() types.IHeader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeader")
	ret0, _ := ret[0].(types.IHeader)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader
func (mr *MockChainReaderMockRecorder) CurrentHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeader", reflect.TypeOf((*MockChainReader)(nil).CurrentHeader))
}

// GetHeader mocks base method
func (m *MockChainReader) GetHeader(hash common.Hash) types.IHeader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", hash)
	ret0, _ := ret[0].(types.IHeader)
	return ret0
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockChainReaderMockRecorder) GetHeader(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockChainReader)(nil).GetHeader), hash)
}

// GetHeaderByNumber mocks base method
func (m *MockChainReader) GetHeaderByNumber(number uint64) types.IHeader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByNumber", number)
	ret0, _ := ret[0].(types.IHeader)
	return ret0
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber
func (mr *MockChainReaderMockRecorder) GetHeaderByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockChainReader)(nil).GetHeaderByNumber), number)
}

// GetBlock mocks base method
func (m *MockChainReader) GetBlock(hash common.Hash) types.IBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash)
	ret0, _ := ret[0].(types.IBlock)
	return ret0
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockChainReaderMockRecorder) GetBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockChainReader)(nil).GetBlock), hash)
}

// GetAdjustedDifficulty mocks base method
func (m *MockChainReader) GetAdjustedDifficulty(header types.IHeader) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdjustedDifficulty", header)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdjustedDifficulty indicates an expected call of GetAdjustedDifficulty
func (mr *MockChainReaderMockRecorder) GetAdjustedDifficulty(header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdjustedDifficulty", reflect.TypeOf((*MockChainReader)(nil).GetAdjustedDifficulty), header)
}

// SkipDifficultyCheck mocks base method
func (m *MockChainReader) SkipDifficultyCheck() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipDifficultyCheck")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SkipDifficultyCheck indicates an expected call of SkipDifficultyCheck
func (mr *MockChainReaderMockRecorder) SkipDifficultyCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipDifficultyCheck", reflect.TypeOf((*MockChainReader)(nil).SkipDifficultyCheck))
}
