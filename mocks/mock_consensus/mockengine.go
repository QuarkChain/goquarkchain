// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_consensus is a generated GoMock package.
package mock_consensus

import (
	"github.com/QuarkChain/goquarkchain/account"
	"github.com/QuarkChain/goquarkchain/consensus"
	"github.com/QuarkChain/goquarkchain/core/types"
	"github.com/golang/mock/gomock"
	"math/big"
	"reflect"
)

// MockEngine is a mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Author mocks base method
func (m *MockEngine) Author(header types.IHeader) (account.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Author", header)
	ret0, _ := ret[0].(account.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Author indicates an expected call of Author
func (mr *MockEngineMockRecorder) Author(header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Author", reflect.TypeOf((*MockEngine)(nil).Author), header)
}

// VerifyHeader mocks base method
func (m *MockEngine) VerifyHeader(chain consensus.ChainReader, header types.IHeader, seal bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyHeader", chain, header, seal)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyHeader indicates an expected call of VerifyHeader
func (mr *MockEngineMockRecorder) VerifyHeader(chain, header, seal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeader", reflect.TypeOf((*MockEngine)(nil).VerifyHeader), chain, header, seal)
}

// VerifyHeaders mocks base method
func (m *MockEngine) VerifyHeaders(chain consensus.ChainReader, headers []types.IHeader, seals []bool) (chan<- struct{}, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyHeaders", chain, headers, seals)
	ret0, _ := ret[0].(chan<- struct{})
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// VerifyHeaders indicates an expected call of VerifyHeaders
func (mr *MockEngineMockRecorder) VerifyHeaders(chain, headers, seals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeaders", reflect.TypeOf((*MockEngine)(nil).VerifyHeaders), chain, headers, seals)
}

// VerifySeal mocks base method
func (m *MockEngine) VerifySeal(chain consensus.ChainReader, header types.IHeader, adjustedDiff *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySeal", chain, header, adjustedDiff)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifySeal indicates an expected call of VerifySeal
func (mr *MockEngineMockRecorder) VerifySeal(chain, header, adjustedDiff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySeal", reflect.TypeOf((*MockEngine)(nil).VerifySeal), chain, header, adjustedDiff)
}

// Prepare mocks base method
func (m *MockEngine) Prepare(chain consensus.ChainReader, header types.IHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", chain, header)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare
func (mr *MockEngineMockRecorder) Prepare(chain, header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockEngine)(nil).Prepare), chain, header)
}

// Seal mocks base method
func (m *MockEngine) Seal(chain consensus.ChainReader, block types.IBlock, results chan<- types.IBlock, stop <-chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", chain, block, results, stop)
	ret0, _ := ret[0].(error)
	return ret0
}

// Seal indicates an expected call of Seal
func (mr *MockEngineMockRecorder) Seal(chain, block, results, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockEngine)(nil).Seal), chain, block, results, stop)
}

// CalcDifficulty mocks base method
func (m *MockEngine) CalcDifficulty(chain consensus.ChainReader, time uint64, parent types.IHeader) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcDifficulty", chain, time, parent)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CalcDifficulty indicates an expected call of CalcDifficulty
func (mr *MockEngineMockRecorder) CalcDifficulty(chain, time, parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcDifficulty", reflect.TypeOf((*MockEngine)(nil).CalcDifficulty), chain, time, parent)
}

// Close mocks base method
func (m *MockEngine) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockEngineMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEngine)(nil).Close))
}
