// Code generated by MockGen. DO NOT EDIT.
// Source: cluster/rpc/interface.go

// Package mock_master is a generated GoMock package.
package mock_master

import (
	"github.com/QuarkChain/goquarkchain/cluster/rpc"
	"github.com/QuarkChain/goquarkchain/p2p"
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockShardConnForP2P is a mock of ShardConnForP2P interface
type MockShardConnForP2P struct {
	ctrl     *gomock.Controller
	recorder *MockShardConnForP2PMockRecorder
}

// MockShardConnForP2PMockRecorder is the mock recorder for MockShardConnForP2P
type MockShardConnForP2PMockRecorder struct {
	mock *MockShardConnForP2P
}

// NewMockShardConnForP2P creates a new mock instance
func NewMockShardConnForP2P(ctrl *gomock.Controller) *MockShardConnForP2P {
	mock := &MockShardConnForP2P{ctrl: ctrl}
	mock.recorder = &MockShardConnForP2PMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShardConnForP2P) EXPECT() *MockShardConnForP2PMockRecorder {
	return m.recorder
}

// AddTransactions mocks base method
func (m *MockShardConnForP2P) AddTransactions(request *p2p.NewTransactionList) (*rpc.HashList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransactions", request)
	ret0, _ := ret[0].(*rpc.HashList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTransactions indicates an expected call of AddTransactions
func (mr *MockShardConnForP2PMockRecorder) AddTransactions(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransactions", reflect.TypeOf((*MockShardConnForP2P)(nil).AddTransactions), request)
}

// GetMinorBlockList mocks base method
func (m *MockShardConnForP2P) GetMinorBlockList(request *rpc.GetMinorBlockListRequest) (*rpc.GetMinorBlockListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinorBlockList", request)
	ret0, _ := ret[0].(*rpc.GetMinorBlockListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinorBlockList indicates an expected call of GetMinorBlockList
func (mr *MockShardConnForP2PMockRecorder) GetMinorBlockList(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinorBlockList", reflect.TypeOf((*MockShardConnForP2P)(nil).GetMinorBlockList), request)
}

// GetMinorBlockHeaderList mocks base method
func (m *MockShardConnForP2P) GetMinorBlockHeaderList(request *rpc.GetMinorBlockHeaderListRequest) (*rpc.GetMinorBlockHeaderListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinorBlockHeaderList", request)
	ret0, _ := ret[0].(*rpc.GetMinorBlockHeaderListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinorBlockHeaderList indicates an expected call of GetMinorBlockHeaderList
func (mr *MockShardConnForP2PMockRecorder) GetMinorBlockHeaderList(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinorBlockHeaderList", reflect.TypeOf((*MockShardConnForP2P)(nil).GetMinorBlockHeaderList), request)
}

// HandleNewTip mocks base method
func (m *MockShardConnForP2P) HandleNewTip(request *p2p.Tip) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNewTip", request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleNewTip indicates an expected call of HandleNewTip
func (mr *MockShardConnForP2PMockRecorder) HandleNewTip(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNewTip", reflect.TypeOf((*MockShardConnForP2P)(nil).HandleNewTip), request)
}

// AddMinorBlock mocks base method
func (m *MockShardConnForP2P) AddMinorBlock(request *p2p.NewBlockMinor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMinorBlock", request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMinorBlock indicates an expected call of AddMinorBlock
func (mr *MockShardConnForP2PMockRecorder) AddMinorBlock(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMinorBlock", reflect.TypeOf((*MockShardConnForP2P)(nil).AddMinorBlock), request)
}

// AddBlockListForSync mocks base method
func (m *MockShardConnForP2P) AddBlockListForSync(request *rpc.HashList) (*rpc.ShardStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlockListForSync", request)
	ret0, _ := ret[0].(*rpc.ShardStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlockListForSync indicates an expected call of AddBlockListForSync
func (mr *MockShardConnForP2PMockRecorder) AddBlockListForSync(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockListForSync", reflect.TypeOf((*MockShardConnForP2P)(nil).AddBlockListForSync), request)
}
