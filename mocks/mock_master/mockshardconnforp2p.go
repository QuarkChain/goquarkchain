// Code generated by MockGen. DO NOT EDIT.
// Source: cluster/rpc/interface.go

// Package mock_master is a generated GoMock package.
package mock_master

import (
	account "github.com/QuarkChain/goquarkchain/account"
	rpc "github.com/QuarkChain/goquarkchain/cluster/rpc"
	consensus "github.com/QuarkChain/goquarkchain/consensus"
	types "github.com/QuarkChain/goquarkchain/core/types"
	rpc0 "github.com/QuarkChain/goquarkchain/rpc"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockConnManager is a mock of ConnManager interface
type MockConnManager struct {
	ctrl     *gomock.Controller
	recorder *MockConnManagerMockRecorder
}

// MockConnManagerMockRecorder is the mock recorder for MockConnManager
type MockConnManagerMockRecorder struct {
	mock *MockConnManager
}

// NewMockConnManager creates a new mock instance
func NewMockConnManager(ctrl *gomock.Controller) *MockConnManager {
	mock := &MockConnManager{ctrl: ctrl}
	mock.recorder = &MockConnManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnManager) EXPECT() *MockConnManagerMockRecorder {
	return m.recorder
}

// GetOneSlaveConnById mocks base method
func (m *MockConnManager) GetOneSlaveConnById(fullShardId uint32) rpc.ISlaveConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneSlaveConnById", fullShardId)
	ret0, _ := ret[0].(rpc.ISlaveConn)
	return ret0
}

// GetOneSlaveConnById indicates an expected call of GetOneSlaveConnById
func (mr *MockConnManagerMockRecorder) GetOneSlaveConnById(fullShardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneSlaveConnById", reflect.TypeOf((*MockConnManager)(nil).GetOneSlaveConnById), fullShardId)
}

// GetSlaveConnsById mocks base method
func (m *MockConnManager) GetSlaveConnsById(fullShardId uint32) []rpc.ISlaveConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlaveConnsById", fullShardId)
	ret0, _ := ret[0].([]rpc.ISlaveConn)
	return ret0
}

// GetSlaveConnsById indicates an expected call of GetSlaveConnsById
func (mr *MockConnManagerMockRecorder) GetSlaveConnsById(fullShardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlaveConnsById", reflect.TypeOf((*MockConnManager)(nil).GetSlaveConnsById), fullShardId)
}

// GetSlaveConns mocks base method
func (m *MockConnManager) GetSlaveConns() []rpc.ISlaveConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlaveConns")
	ret0, _ := ret[0].([]rpc.ISlaveConn)
	return ret0
}

// GetSlaveConns indicates an expected call of GetSlaveConns
func (mr *MockConnManagerMockRecorder) GetSlaveConns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlaveConns", reflect.TypeOf((*MockConnManager)(nil).GetSlaveConns))
}

// ConnCount mocks base method
func (m *MockConnManager) ConnCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// ConnCount indicates an expected call of ConnCount
func (mr *MockConnManagerMockRecorder) ConnCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnCount", reflect.TypeOf((*MockConnManager)(nil).ConnCount))
}

// MockISlaveConn is a mock of ISlaveConn interface
type MockISlaveConn struct {
	ctrl     *gomock.Controller
	recorder *MockISlaveConnMockRecorder
}

// MockISlaveConnMockRecorder is the mock recorder for MockISlaveConn
type MockISlaveConnMockRecorder struct {
	mock *MockISlaveConn
}

// NewMockISlaveConn creates a new mock instance
func NewMockISlaveConn(ctrl *gomock.Controller) *MockISlaveConn {
	mock := &MockISlaveConn{ctrl: ctrl}
	mock.recorder = &MockISlaveConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISlaveConn) EXPECT() *MockISlaveConnMockRecorder {
	return m.recorder
}

// AddTransactions mocks base method
func (m *MockISlaveConn) AddTransactions(request *rpc.P2PRedirectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransactions", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransactions indicates an expected call of AddTransactions
func (mr *MockISlaveConnMockRecorder) AddTransactions(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransactions", reflect.TypeOf((*MockISlaveConn)(nil).AddTransactions), request)
}

// GetMinorBlockByHash mocks base method
func (m *MockISlaveConn) GetMinorBlockByHash(blockHash common.Hash, branch account.Branch, needExtraInfo bool) (*types.MinorBlock, *rpc.PoSWInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinorBlockByHash", blockHash, branch, needExtraInfo)
	ret0, _ := ret[0].(*types.MinorBlock)
	ret1, _ := ret[1].(*rpc.PoSWInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMinorBlockByHash indicates an expected call of GetMinorBlockByHash
func (mr *MockISlaveConnMockRecorder) GetMinorBlockByHash(blockHash, branch, needExtraInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinorBlockByHash", reflect.TypeOf((*MockISlaveConn)(nil).GetMinorBlockByHash), blockHash, branch, needExtraInfo)
}

// GetMinorBlockByHeight mocks base method
func (m *MockISlaveConn) GetMinorBlockByHeight(height *uint64, branch account.Branch, needExtraInfo bool) (*types.MinorBlock, *rpc.PoSWInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinorBlockByHeight", height, branch, needExtraInfo)
	ret0, _ := ret[0].(*types.MinorBlock)
	ret1, _ := ret[1].(*rpc.PoSWInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMinorBlockByHeight indicates an expected call of GetMinorBlockByHeight
func (mr *MockISlaveConnMockRecorder) GetMinorBlockByHeight(height, branch, needExtraInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinorBlockByHeight", reflect.TypeOf((*MockISlaveConn)(nil).GetMinorBlockByHeight), height, branch, needExtraInfo)
}

// GetMinorBlocks mocks base method
func (m *MockISlaveConn) GetMinorBlocks(request *rpc.P2PRedirectRequest) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinorBlocks", request)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinorBlocks indicates an expected call of GetMinorBlocks
func (mr *MockISlaveConnMockRecorder) GetMinorBlocks(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinorBlocks", reflect.TypeOf((*MockISlaveConn)(nil).GetMinorBlocks), request)
}

// GetMinorBlockHeaderList mocks base method
func (m *MockISlaveConn) GetMinorBlockHeaderList(req *rpc.P2PRedirectRequest) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinorBlockHeaderList", req)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinorBlockHeaderList indicates an expected call of GetMinorBlockHeaderList
func (mr *MockISlaveConnMockRecorder) GetMinorBlockHeaderList(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinorBlockHeaderList", reflect.TypeOf((*MockISlaveConn)(nil).GetMinorBlockHeaderList), req)
}

// GetMinorBlockHeaderListWithSkip mocks base method
func (m *MockISlaveConn) GetMinorBlockHeaderListWithSkip(req *rpc.P2PRedirectRequest) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinorBlockHeaderListWithSkip", req)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinorBlockHeaderListWithSkip indicates an expected call of GetMinorBlockHeaderListWithSkip
func (mr *MockISlaveConnMockRecorder) GetMinorBlockHeaderListWithSkip(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinorBlockHeaderListWithSkip", reflect.TypeOf((*MockISlaveConn)(nil).GetMinorBlockHeaderListWithSkip), req)
}

// HandleNewTip mocks base method
func (m *MockISlaveConn) HandleNewTip(request *rpc.HandleNewTipRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNewTip", request)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleNewTip indicates an expected call of HandleNewTip
func (mr *MockISlaveConnMockRecorder) HandleNewTip(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNewTip", reflect.TypeOf((*MockISlaveConn)(nil).HandleNewTip), request)
}

// HandleNewMinorBlock mocks base method
func (m *MockISlaveConn) HandleNewMinorBlock(request *rpc.P2PRedirectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNewMinorBlock", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleNewMinorBlock indicates an expected call of HandleNewMinorBlock
func (mr *MockISlaveConnMockRecorder) HandleNewMinorBlock(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNewMinorBlock", reflect.TypeOf((*MockISlaveConn)(nil).HandleNewMinorBlock), request)
}

// AddBlockListForSync mocks base method
func (m *MockISlaveConn) AddBlockListForSync(request *rpc.AddBlockListForSyncRequest) (*rpc.ShardStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlockListForSync", request)
	ret0, _ := ret[0].(*rpc.ShardStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlockListForSync indicates an expected call of AddBlockListForSync
func (mr *MockISlaveConnMockRecorder) AddBlockListForSync(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockListForSync", reflect.TypeOf((*MockISlaveConn)(nil).AddBlockListForSync), request)
}

// GetSlaveID mocks base method
func (m *MockISlaveConn) GetSlaveID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlaveID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSlaveID indicates an expected call of GetSlaveID
func (mr *MockISlaveConnMockRecorder) GetSlaveID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlaveID", reflect.TypeOf((*MockISlaveConn)(nil).GetSlaveID))
}

// GetShardMaskList mocks base method
func (m *MockISlaveConn) GetShardMaskList() []*types.ChainMask {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardMaskList")
	ret0, _ := ret[0].([]*types.ChainMask)
	return ret0
}

// GetShardMaskList indicates an expected call of GetShardMaskList
func (mr *MockISlaveConnMockRecorder) GetShardMaskList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardMaskList", reflect.TypeOf((*MockISlaveConn)(nil).GetShardMaskList))
}

// MasterInfo mocks base method
func (m *MockISlaveConn) MasterInfo(ip string, port uint16, rootTip *types.RootBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MasterInfo", ip, port, rootTip)
	ret0, _ := ret[0].(error)
	return ret0
}

// MasterInfo indicates an expected call of MasterInfo
func (mr *MockISlaveConnMockRecorder) MasterInfo(ip, port, rootTip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MasterInfo", reflect.TypeOf((*MockISlaveConn)(nil).MasterInfo), ip, port, rootTip)
}

// HasShard mocks base method
func (m *MockISlaveConn) HasShard(fullShardID uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasShard", fullShardID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasShard indicates an expected call of HasShard
func (mr *MockISlaveConnMockRecorder) HasShard(fullShardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasShard", reflect.TypeOf((*MockISlaveConn)(nil).HasShard), fullShardID)
}

// SendPing mocks base method
func (m *MockISlaveConn) SendPing() ([]byte, []*types.ChainMask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPing")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]*types.ChainMask)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendPing indicates an expected call of SendPing
func (mr *MockISlaveConnMockRecorder) SendPing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPing", reflect.TypeOf((*MockISlaveConn)(nil).SendPing))
}

// HeartBeat mocks base method
func (m *MockISlaveConn) HeartBeat() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartBeat")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HeartBeat indicates an expected call of HeartBeat
func (mr *MockISlaveConnMockRecorder) HeartBeat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartBeat", reflect.TypeOf((*MockISlaveConn)(nil).HeartBeat))
}

// GetUnconfirmedHeaders mocks base method
func (m *MockISlaveConn) GetUnconfirmedHeaders() (*rpc.GetUnconfirmedHeadersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnconfirmedHeaders")
	ret0, _ := ret[0].(*rpc.GetUnconfirmedHeadersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnconfirmedHeaders indicates an expected call of GetUnconfirmedHeaders
func (mr *MockISlaveConnMockRecorder) GetUnconfirmedHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnconfirmedHeaders", reflect.TypeOf((*MockISlaveConn)(nil).GetUnconfirmedHeaders))
}

// GetAccountData mocks base method
func (m *MockISlaveConn) GetAccountData(address *account.Address, height *uint64) (*rpc.GetAccountDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountData", address, height)
	ret0, _ := ret[0].(*rpc.GetAccountDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountData indicates an expected call of GetAccountData
func (mr *MockISlaveConnMockRecorder) GetAccountData(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountData", reflect.TypeOf((*MockISlaveConn)(nil).GetAccountData), address, height)
}

// AddRootBlock mocks base method
func (m *MockISlaveConn) AddRootBlock(rootBlock *types.RootBlock, expectSwitch bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRootBlock", rootBlock, expectSwitch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRootBlock indicates an expected call of AddRootBlock
func (mr *MockISlaveConnMockRecorder) AddRootBlock(rootBlock, expectSwitch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRootBlock", reflect.TypeOf((*MockISlaveConn)(nil).AddRootBlock), rootBlock, expectSwitch)
}

// GenTx mocks base method
func (m *MockISlaveConn) GenTx(numTxPerShard, xShardPercent uint32, tx *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenTx", numTxPerShard, xShardPercent, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenTx indicates an expected call of GenTx
func (mr *MockISlaveConnMockRecorder) GenTx(numTxPerShard, xShardPercent, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenTx", reflect.TypeOf((*MockISlaveConn)(nil).GenTx), numTxPerShard, xShardPercent, tx)
}

// SendMiningConfigToSlaves mocks base method
func (m *MockISlaveConn) SendMiningConfigToSlaves(artificialTxConfig *rpc.ArtificialTxConfig, mining bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMiningConfigToSlaves", artificialTxConfig, mining)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMiningConfigToSlaves indicates an expected call of SendMiningConfigToSlaves
func (mr *MockISlaveConnMockRecorder) SendMiningConfigToSlaves(artificialTxConfig, mining interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMiningConfigToSlaves", reflect.TypeOf((*MockISlaveConn)(nil).SendMiningConfigToSlaves), artificialTxConfig, mining)
}

// AddTransaction mocks base method
func (m *MockISlaveConn) AddTransaction(tx *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction
func (mr *MockISlaveConnMockRecorder) AddTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockISlaveConn)(nil).AddTransaction), tx)
}

// ExecuteTransaction mocks base method
func (m *MockISlaveConn) ExecuteTransaction(tx *types.Transaction, fromAddress *account.Address, height *uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTransaction", tx, fromAddress, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTransaction indicates an expected call of ExecuteTransaction
func (mr *MockISlaveConnMockRecorder) ExecuteTransaction(tx, fromAddress, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTransaction", reflect.TypeOf((*MockISlaveConn)(nil).ExecuteTransaction), tx, fromAddress, height)
}

// GetTransactionByHash mocks base method
func (m *MockISlaveConn) GetTransactionByHash(txHash common.Hash, branch account.Branch) (*types.MinorBlock, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", txHash, branch)
	ret0, _ := ret[0].(*types.MinorBlock)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash
func (mr *MockISlaveConnMockRecorder) GetTransactionByHash(txHash, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockISlaveConn)(nil).GetTransactionByHash), txHash, branch)
}

// GetTransactionReceipt mocks base method
func (m *MockISlaveConn) GetTransactionReceipt(txHash common.Hash, branch account.Branch) (*types.MinorBlock, uint32, *types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionReceipt", txHash, branch)
	ret0, _ := ret[0].(*types.MinorBlock)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(*types.Receipt)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt
func (mr *MockISlaveConnMockRecorder) GetTransactionReceipt(txHash, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockISlaveConn)(nil).GetTransactionReceipt), txHash, branch)
}

// GetTransactionsByAddress mocks base method
func (m *MockISlaveConn) GetTransactionsByAddress(address *account.Address, start []byte, limit uint32, transferTokenID *uint64) ([]*rpc.TransactionDetail, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByAddress", address, start, limit, transferTokenID)
	ret0, _ := ret[0].([]*rpc.TransactionDetail)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransactionsByAddress indicates an expected call of GetTransactionsByAddress
func (mr *MockISlaveConnMockRecorder) GetTransactionsByAddress(address, start, limit, transferTokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByAddress", reflect.TypeOf((*MockISlaveConn)(nil).GetTransactionsByAddress), address, start, limit, transferTokenID)
}

// GetAllTx mocks base method
func (m *MockISlaveConn) GetAllTx(branch account.Branch, start []byte, limit uint32) ([]*rpc.TransactionDetail, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTx", branch, start, limit)
	ret0, _ := ret[0].([]*rpc.TransactionDetail)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllTx indicates an expected call of GetAllTx
func (mr *MockISlaveConnMockRecorder) GetAllTx(branch, start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTx", reflect.TypeOf((*MockISlaveConn)(nil).GetAllTx), branch, start, limit)
}

// GetLogs mocks base method
func (m *MockISlaveConn) GetLogs(args *rpc0.FilterQuery) ([]*types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", args)
	ret0, _ := ret[0].([]*types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs
func (mr *MockISlaveConnMockRecorder) GetLogs(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockISlaveConn)(nil).GetLogs), args)
}

// EstimateGas mocks base method
func (m *MockISlaveConn) EstimateGas(tx *types.Transaction, fromAddress *account.Address) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", tx, fromAddress)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockISlaveConnMockRecorder) EstimateGas(tx, fromAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockISlaveConn)(nil).EstimateGas), tx, fromAddress)
}

// GetStorageAt mocks base method
func (m *MockISlaveConn) GetStorageAt(address *account.Address, key common.Hash, height *uint64) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAt", address, key, height)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAt indicates an expected call of GetStorageAt
func (mr *MockISlaveConnMockRecorder) GetStorageAt(address, key, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAt", reflect.TypeOf((*MockISlaveConn)(nil).GetStorageAt), address, key, height)
}

// GetCode mocks base method
func (m *MockISlaveConn) GetCode(address *account.Address, height *uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", address, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode
func (mr *MockISlaveConnMockRecorder) GetCode(address, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockISlaveConn)(nil).GetCode), address, height)
}

// GasPrice mocks base method
func (m *MockISlaveConn) GasPrice(branch account.Branch, tokenID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasPrice", branch, tokenID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GasPrice indicates an expected call of GasPrice
func (mr *MockISlaveConnMockRecorder) GasPrice(branch, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasPrice", reflect.TypeOf((*MockISlaveConn)(nil).GasPrice), branch, tokenID)
}

// GetWork mocks base method
func (m *MockISlaveConn) GetWork(branch account.Branch, address *account.Address) (*consensus.MiningWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWork", branch, address)
	ret0, _ := ret[0].(*consensus.MiningWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWork indicates an expected call of GetWork
func (mr *MockISlaveConnMockRecorder) GetWork(branch, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWork", reflect.TypeOf((*MockISlaveConn)(nil).GetWork), branch, address)
}

// SubmitWork mocks base method
func (m *MockISlaveConn) SubmitWork(work *rpc.SubmitWorkRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitWork", work)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitWork indicates an expected call of SubmitWork
func (mr *MockISlaveConnMockRecorder) SubmitWork(work interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitWork", reflect.TypeOf((*MockISlaveConn)(nil).SubmitWork), work)
}

// SetMining mocks base method
func (m *MockISlaveConn) SetMining(mining bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMining", mining)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMining indicates an expected call of SetMining
func (mr *MockISlaveConnMockRecorder) SetMining(mining interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMining", reflect.TypeOf((*MockISlaveConn)(nil).SetMining), mining)
}

// GetRootChainStakes mocks base method
func (m *MockISlaveConn) GetRootChainStakes(address account.Address, lastMinor common.Hash) (*big.Int, *account.Recipient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootChainStakes", address, lastMinor)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(*account.Recipient)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRootChainStakes indicates an expected call of GetRootChainStakes
func (mr *MockISlaveConnMockRecorder) GetRootChainStakes(address, lastMinor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootChainStakes", reflect.TypeOf((*MockISlaveConn)(nil).GetRootChainStakes), address, lastMinor)
}

// CheckMinorBlocksInRoot mocks base method
func (m *MockISlaveConn) CheckMinorBlocksInRoot(rootBlock *types.RootBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMinorBlocksInRoot", rootBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckMinorBlocksInRoot indicates an expected call of CheckMinorBlocksInRoot
func (mr *MockISlaveConnMockRecorder) CheckMinorBlocksInRoot(rootBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMinorBlocksInRoot", reflect.TypeOf((*MockISlaveConn)(nil).CheckMinorBlocksInRoot), rootBlock)
}
