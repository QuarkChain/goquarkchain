// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// request data
type Request struct {
	Op                   uint32   `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	RpcId                int64    `protobuf:"varint,2,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetOp() uint32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *Request) GetRpcId() int64 {
	if m != nil {
		return m.RpcId
	}
	return 0
}

func (m *Request) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// response data
type Response struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	RpcId                int64    `protobuf:"varint,2,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Response) GetRpcId() int64 {
	if m != nil {
		return m.RpcId
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "rpc.Request")
	proto.RegisterType((*Response)(nil), "rpc.Response")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x4f, 0x6f, 0x1a, 0x3d,
	0x10, 0xc6, 0x5f, 0x20, 0x24, 0x61, 0x02, 0x89, 0xb2, 0x79, 0x49, 0x50, 0x7b, 0x41, 0x48, 0xad,
	0x68, 0xda, 0xd2, 0x88, 0xfc, 0x97, 0x7a, 0x59, 0x92, 0x74, 0x83, 0x94, 0xb4, 0xd1, 0x2e, 0x55,
	0x7b, 0xab, 0x1c, 0x7b, 0x02, 0x16, 0x60, 0x6f, 0x6d, 0x93, 0x92, 0x0f, 0xd2, 0xcf, 0xdb, 0x6a,
	0x21, 0x82, 0xac, 0xd4, 0xca, 0xe6, 0xd6, 0x1b, 0xc8, 0xf3, 0xf3, 0x33, 0x9e, 0x79, 0x3c, 0x5e,
	0x28, 0xa8, 0x98, 0x36, 0x62, 0x25, 0x8d, 0xf4, 0x72, 0x2a, 0xa6, 0xb5, 0x73, 0x58, 0x09, 0xf1,
	0xfb, 0x08, 0xb5, 0xf1, 0xd6, 0x21, 0x2b, 0xe3, 0x4a, 0xa6, 0x9a, 0xa9, 0x97, 0xc2, 0xac, 0x8c,
	0xbd, 0x32, 0x2c, 0xab, 0x98, 0x7e, 0xe3, 0xac, 0x92, 0xad, 0x66, 0xea, 0xb9, 0x30, 0xaf, 0x62,
	0xda, 0x66, 0x9e, 0x07, 0x4b, 0x8c, 0x18, 0x52, 0xc9, 0x57, 0x33, 0xf5, 0x62, 0x38, 0xf9, 0x5d,
	0x3b, 0x84, 0xd5, 0x10, 0x75, 0x2c, 0x85, 0xc6, 0xd9, 0x7a, 0x66, 0xbe, 0xfe, 0x97, 0xad, 0x9a,
	0x3f, 0x73, 0xe0, 0x5d, 0x13, 0x6d, 0x50, 0x45, 0xa8, 0xee, 0x51, 0x45, 0x9c, 0xe1, 0xa7, 0xd8,
	0x3b, 0x80, 0x2d, 0x9f, 0xb1, 0x6b, 0x2e, 0xa4, 0x6a, 0x0d, 0x24, 0xed, 0x5f, 0x22, 0x61, 0xa8,
	0xbc, 0x62, 0x23, 0xc9, 0xfd, 0x31, 0xdb, 0x67, 0xa5, 0xc7, 0x7f, 0x53, 0xd5, 0xda, 0x7f, 0xde,
	0x09, 0xec, 0xfc, 0x81, 0xba, 0xe2, 0xda, 0xd8, 0xc8, 0x3d, 0xd8, 0x68, 0x29, 0x49, 0x18, 0x25,
	0xda, 0x7c, 0xc4, 0x1f, 0x1d, 0x1e, 0xdb, 0x88, 0x23, 0x28, 0xcf, 0x88, 0x8e, 0x22, 0x42, 0x13,
	0x6a, 0xb8, 0x14, 0xda, 0xc6, 0x1d, 0xc3, 0xf6, 0x53, 0xa5, 0x79, 0xb2, 0x36, 0xb0, 0x09, 0x9b,
	0x01, 0x9a, 0x79, 0xbc, 0xcb, 0xb1, 0x4e, 0x60, 0x27, 0xc5, 0x38, 0x17, 0xa4, 0xf9, 0x6b, 0x0d,
	0x36, 0xa3, 0x01, 0xb9, 0xc7, 0x54, 0x5b, 0x76, 0xa1, 0xd0, 0x43, 0xa2, 0x4c, 0x0b, 0x89, 0x55,
	0xfb, 0x35, 0xc0, 0xb4, 0xb1, 0x6d, 0x71, 0x27, 0x6d, 0xc1, 0x2f, 0x60, 0xe9, 0x86, 0x8b, 0xae,
	0x2d, 0xec, 0x25, 0xe4, 0x03, 0x14, 0x9d, 0xb1, 0x2d, 0xee, 0x2d, 0x14, 0x7d, 0xc6, 0x42, 0x29,
	0x8d, 0x53, 0x69, 0x4f, 0xa1, 0x12, 0xa0, 0xf9, 0x2c, 0xa8, 0x14, 0x77, 0x5c, 0x0d, 0x91, 0xb9,
	0x1b, 0xe7, 0x1d, 0xac, 0x07, 0x68, 0x7c, 0x4a, 0xe5, 0x48, 0x98, 0xf3, 0xc4, 0xe8, 0x76, 0xc0,
	0x67, 0xec, 0x89, 0x63, 0x6c, 0x40, 0x03, 0x4a, 0xa9, 0x1e, 0xba, 0x65, 0xb4, 0x80, 0xc0, 0x3e,
	0x78, 0x17, 0x63, 0xa4, 0x23, 0x83, 0x0b, 0x40, 0x47, 0x50, 0x4e, 0xab, 0x84, 0x48, 0x91, 0xc7,
	0xd6, 0x7a, 0xbd, 0x87, 0xe7, 0x69, 0x2e, 0x29, 0x72, 0xeb, 0xc1, 0x67, 0x4c, 0xa1, 0xb6, 0x5e,
	0x9e, 0x57, 0xb0, 0x9a, 0x54, 0x7b, 0x30, 0xb0, 0x5b, 0xa0, 0x0e, 0x2b, 0x01, 0x9a, 0x2b, 0xd9,
	0xb5, 0x6e, 0xfa, 0x06, 0xd6, 0x2e, 0xb4, 0xe1, 0x43, 0x62, 0x30, 0x20, 0xda, 0xc1, 0x5a, 0x01,
	0x9a, 0xc8, 0x48, 0x45, 0xba, 0xe8, 0x1b, 0xb7, 0x34, 0xce, 0x24, 0x43, 0x97, 0xb3, 0x11, 0x7d,
	0xa3, 0x38, 0x45, 0xb7, 0x4d, 0xbf, 0x48, 0xd5, 0x77, 0xb8, 0x84, 0xd1, 0xe8, 0x76, 0xc8, 0x9d,
	0x82, 0xf7, 0x60, 0xc3, 0x67, 0xec, 0xab, 0xee, 0x11, 0xc5, 0x3a, 0x63, 0x17, 0xf7, 0x1f, 0xc2,
	0xff, 0x2d, 0x62, 0x68, 0x6f, 0x41, 0xec, 0x14, 0x2a, 0xa9, 0x39, 0x9d, 0x30, 0x1f, 0xa4, 0x8a,
	0x1e, 0x04, 0xb5, 0xa1, 0xbb, 0x50, 0x88, 0x26, 0xb7, 0xc1, 0x61, 0x5a, 0x1c, 0xc3, 0xf6, 0x59,
	0x0f, 0x69, 0x7f, 0x2e, 0xa4, 0xdb, 0x22, 0x19, 0x0a, 0xff, 0xd4, 0xa8, 0x4d, 0x1c, 0x75, 0x49,
	0x04, 0x1b, 0xa0, 0xdb, 0xc3, 0x33, 0xed, 0xd2, 0x22, 0x4f, 0xce, 0x01, 0x6c, 0xcd, 0x04, 0x9c,
	0xe7, 0xc8, 0xed, 0xf2, 0xe4, 0x13, 0x61, 0xff, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xd0,
	0xa0, 0x87, 0x2f, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MasterServerSideOpClient is the client API for MasterServerSideOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterServerSideOpClient interface {
	AddMinorBlockHeader(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// p2p apis
	BroadcastNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BroadcastTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BroadcastNewMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type masterServerSideOpClient struct {
	cc *grpc.ClientConn
}

func NewMasterServerSideOpClient(cc *grpc.ClientConn) MasterServerSideOpClient {
	return &masterServerSideOpClient{cc}
}

func (c *masterServerSideOpClient) AddMinorBlockHeader(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/AddMinorBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) AddMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/AddMinorBlockHeaderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) BroadcastNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/BroadcastNewTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) BroadcastTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/BroadcastTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) BroadcastNewMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/BroadcastNewMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) GetMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/GetMinorBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) GetMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/GetMinorBlockHeaderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServerSideOpServer is the server API for MasterServerSideOp service.
type MasterServerSideOpServer interface {
	AddMinorBlockHeader(context.Context, *Request) (*Response, error)
	AddMinorBlockHeaderList(context.Context, *Request) (*Response, error)
	// p2p apis
	BroadcastNewTip(context.Context, *Request) (*Response, error)
	BroadcastTransactions(context.Context, *Request) (*Response, error)
	BroadcastNewMinorBlock(context.Context, *Request) (*Response, error)
	GetMinorBlockList(context.Context, *Request) (*Response, error)
	GetMinorBlockHeaderList(context.Context, *Request) (*Response, error)
}

// UnimplementedMasterServerSideOpServer can be embedded to have forward compatible implementations.
type UnimplementedMasterServerSideOpServer struct {
}

func (*UnimplementedMasterServerSideOpServer) AddMinorBlockHeader(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinorBlockHeader not implemented")
}
func (*UnimplementedMasterServerSideOpServer) AddMinorBlockHeaderList(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinorBlockHeaderList not implemented")
}
func (*UnimplementedMasterServerSideOpServer) BroadcastNewTip(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastNewTip not implemented")
}
func (*UnimplementedMasterServerSideOpServer) BroadcastTransactions(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTransactions not implemented")
}
func (*UnimplementedMasterServerSideOpServer) BroadcastNewMinorBlock(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastNewMinorBlock not implemented")
}
func (*UnimplementedMasterServerSideOpServer) GetMinorBlockList(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlockList not implemented")
}
func (*UnimplementedMasterServerSideOpServer) GetMinorBlockHeaderList(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlockHeaderList not implemented")
}

func RegisterMasterServerSideOpServer(s *grpc.Server, srv MasterServerSideOpServer) {
	s.RegisterService(&_MasterServerSideOp_serviceDesc, srv)
}

func _MasterServerSideOp_AddMinorBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).AddMinorBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/AddMinorBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).AddMinorBlockHeader(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_AddMinorBlockHeaderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).AddMinorBlockHeaderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/AddMinorBlockHeaderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).AddMinorBlockHeaderList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_BroadcastNewTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).BroadcastNewTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/BroadcastNewTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).BroadcastNewTip(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_BroadcastTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).BroadcastTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/BroadcastTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).BroadcastTransactions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_BroadcastNewMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).BroadcastNewMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/BroadcastNewMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).BroadcastNewMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_GetMinorBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).GetMinorBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/GetMinorBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).GetMinorBlockList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_GetMinorBlockHeaderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).GetMinorBlockHeaderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/GetMinorBlockHeaderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).GetMinorBlockHeaderList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterServerSideOp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MasterServerSideOp",
	HandlerType: (*MasterServerSideOpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMinorBlockHeader",
			Handler:    _MasterServerSideOp_AddMinorBlockHeader_Handler,
		},
		{
			MethodName: "AddMinorBlockHeaderList",
			Handler:    _MasterServerSideOp_AddMinorBlockHeaderList_Handler,
		},
		{
			MethodName: "BroadcastNewTip",
			Handler:    _MasterServerSideOp_BroadcastNewTip_Handler,
		},
		{
			MethodName: "BroadcastTransactions",
			Handler:    _MasterServerSideOp_BroadcastTransactions_Handler,
		},
		{
			MethodName: "BroadcastNewMinorBlock",
			Handler:    _MasterServerSideOp_BroadcastNewMinorBlock_Handler,
		},
		{
			MethodName: "GetMinorBlockList",
			Handler:    _MasterServerSideOp_GetMinorBlockList_Handler,
		},
		{
			MethodName: "GetMinorBlockHeaderList",
			Handler:    _MasterServerSideOp_GetMinorBlockHeaderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// SlaveServerSideOpClient is the client API for SlaveServerSideOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlaveServerSideOpClient interface {
	HeartBeat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	MasterInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// APIs for master
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GenTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddRootBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetUnconfirmedHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAccountData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ExecuteTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransactionReceipt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransactionListByAddress(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAllTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetLogs(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	EstimateGas(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetStorageAt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetCode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GasPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SubmitWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// APIs for neighbor slaves
	AddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BatchAddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddMinorBlockListForSync(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SetMining(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CheckMinorBlocksInRoot(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// p2p apis
	GetMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	HandleNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	HandleNewMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type slaveServerSideOpClient struct {
	cc *grpc.ClientConn
}

func NewSlaveServerSideOpClient(cc *grpc.ClientConn) SlaveServerSideOpClient {
	return &slaveServerSideOpClient{cc}
}

func (c *slaveServerSideOpClient) HeartBeat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/heartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) MasterInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/MasterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GenTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GenTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddRootBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddRootBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetUnconfirmedHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetUnconfirmedHeaderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetAccountData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetAccountData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) ExecuteTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/ExecuteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetTransactionReceipt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetTransactionListByAddress(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetTransactionListByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetAllTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetAllTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetLogs(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) EstimateGas(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/EstimateGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetStorageAt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetStorageAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetCode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GasPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) SubmitWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/SubmitWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddXshardTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) BatchAddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/BatchAddXshardTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddMinorBlockListForSync(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddMinorBlockListForSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) SetMining(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/SetMining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) CheckMinorBlocksInRoot(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/CheckMinorBlocksInRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMinorBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMinorBlockHeaderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) HandleNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/HandleNewTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) HandleNewMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/HandleNewMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlaveServerSideOpServer is the server API for SlaveServerSideOp service.
type SlaveServerSideOpServer interface {
	HeartBeat(context.Context, *Request) (*Response, error)
	MasterInfo(context.Context, *Request) (*Response, error)
	// APIs for master
	Ping(context.Context, *Request) (*Response, error)
	GenTx(context.Context, *Request) (*Response, error)
	AddRootBlock(context.Context, *Request) (*Response, error)
	GetUnconfirmedHeaderList(context.Context, *Request) (*Response, error)
	GetAccountData(context.Context, *Request) (*Response, error)
	AddTransaction(context.Context, *Request) (*Response, error)
	GetMinorBlock(context.Context, *Request) (*Response, error)
	GetTransaction(context.Context, *Request) (*Response, error)
	ExecuteTransaction(context.Context, *Request) (*Response, error)
	GetTransactionReceipt(context.Context, *Request) (*Response, error)
	GetTransactionListByAddress(context.Context, *Request) (*Response, error)
	GetAllTx(context.Context, *Request) (*Response, error)
	GetLogs(context.Context, *Request) (*Response, error)
	EstimateGas(context.Context, *Request) (*Response, error)
	GetStorageAt(context.Context, *Request) (*Response, error)
	GetCode(context.Context, *Request) (*Response, error)
	GasPrice(context.Context, *Request) (*Response, error)
	GetWork(context.Context, *Request) (*Response, error)
	SubmitWork(context.Context, *Request) (*Response, error)
	// APIs for neighbor slaves
	AddXshardTxList(context.Context, *Request) (*Response, error)
	BatchAddXshardTxList(context.Context, *Request) (*Response, error)
	AddMinorBlockListForSync(context.Context, *Request) (*Response, error)
	SetMining(context.Context, *Request) (*Response, error)
	CheckMinorBlocksInRoot(context.Context, *Request) (*Response, error)
	// p2p apis
	GetMinorBlockList(context.Context, *Request) (*Response, error)
	 GetMinorBlockHeaderList(context.Context, *Request) (*Response, error)
	HandleNewTip(context.Context, *Request) (*Response, error)
	AddTransactions(context.Context, *Request) (*Response, error)
	HandleNewMinorBlock(context.Context, *Request) (*Response, error)
}

// UnimplementedSlaveServerSideOpServer can be embedded to have forward compatible implementations.
type UnimplementedSlaveServerSideOpServer struct {
}

func (*UnimplementedSlaveServerSideOpServer) HeartBeat(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) MasterInfo(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterInfo not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) Ping(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GenTx(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenTx not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) AddRootBlock(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRootBlock not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetUnconfirmedHeaderList(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnconfirmedHeaderList not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetAccountData(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountData not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) AddTransaction(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransaction not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetMinorBlock(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlock not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetTransaction(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) ExecuteTransaction(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTransaction not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetTransactionReceipt(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionReceipt not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetTransactionListByAddress(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionListByAddress not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetAllTx(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTx not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetLogs(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) EstimateGas(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateGas not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetStorageAt(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageAt not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetCode(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCode not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GasPrice(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrice not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetWork(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWork not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) SubmitWork(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWork not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) AddXshardTxList(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddXshardTxList not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) BatchAddXshardTxList(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddXshardTxList not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) AddMinorBlockListForSync(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinorBlockListForSync not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) SetMining(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMining not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) CheckMinorBlocksInRoot(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMinorBlocksInRoot not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetMinorBlockList(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlockList not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) GetMinorBlockHeaderList(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinorBlockHeaderList not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) HandleNewTip(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleNewTip not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) AddTransactions(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransactions not implemented")
}
func (*UnimplementedSlaveServerSideOpServer) HandleNewMinorBlock(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleNewMinorBlock not implemented")
}

func RegisterSlaveServerSideOpServer(s *grpc.Server, srv SlaveServerSideOpServer) {
	s.RegisterService(&_SlaveServerSideOp_serviceDesc, srv)
}

func _SlaveServerSideOp_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).HeartBeat(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_MasterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).MasterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/MasterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).MasterInfo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GenTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GenTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GenTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GenTx(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddRootBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddRootBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddRootBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddRootBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetUnconfirmedHeaderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetUnconfirmedHeaderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetUnconfirmedHeaderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetUnconfirmedHeaderList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetAccountData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetAccountData(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_ExecuteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).ExecuteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/ExecuteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).ExecuteTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetTransactionReceipt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetTransactionListByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetTransactionListByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetTransactionListByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetTransactionListByAddress(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetAllTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetAllTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetAllTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetAllTx(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetLogs(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/EstimateGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).EstimateGas(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetStorageAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetStorageAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetStorageAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetStorageAt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetCode(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GasPrice(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetWork(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_SubmitWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).SubmitWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/SubmitWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).SubmitWork(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddXshardTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddXshardTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddXshardTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddXshardTxList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_BatchAddXshardTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).BatchAddXshardTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/BatchAddXshardTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).BatchAddXshardTxList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddMinorBlockListForSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddMinorBlockListForSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddMinorBlockListForSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddMinorBlockListForSync(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_SetMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).SetMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/SetMining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).SetMining(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_CheckMinorBlocksInRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).CheckMinorBlocksInRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/CheckMinorBlocksInRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).CheckMinorBlocksInRoot(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMinorBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMinorBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMinorBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMinorBlockList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMinorBlockHeaderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMinorBlockHeaderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMinorBlockHeaderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMinorBlockHeaderList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_HandleNewTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).HandleNewTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/HandleNewTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).HandleNewTip(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddTransactions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_HandleNewMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).HandleNewMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/HandleNewMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).HandleNewMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _SlaveServerSideOp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.SlaveServerSideOp",
	HandlerType: (*SlaveServerSideOpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "heartBeat",
			Handler:    _SlaveServerSideOp_HeartBeat_Handler,
		},
		{
			MethodName: "MasterInfo",
			Handler:    _SlaveServerSideOp_MasterInfo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SlaveServerSideOp_Ping_Handler,
		},
		{
			MethodName: "GenTx",
			Handler:    _SlaveServerSideOp_GenTx_Handler,
		},
		{
			MethodName: "AddRootBlock",
			Handler:    _SlaveServerSideOp_AddRootBlock_Handler,
		},
		{
			MethodName: "GetUnconfirmedHeaderList",
			Handler:    _SlaveServerSideOp_GetUnconfirmedHeaderList_Handler,
		},
		{
			MethodName: "GetAccountData",
			Handler:    _SlaveServerSideOp_GetAccountData_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _SlaveServerSideOp_AddTransaction_Handler,
		},
		{
			MethodName: "GetMinorBlock",
			Handler:    _SlaveServerSideOp_GetMinorBlock_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _SlaveServerSideOp_GetTransaction_Handler,
		},
		{
			MethodName: "ExecuteTransaction",
			Handler:    _SlaveServerSideOp_ExecuteTransaction_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _SlaveServerSideOp_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "GetTransactionListByAddress",
			Handler:    _SlaveServerSideOp_GetTransactionListByAddress_Handler,
		},
		{
			MethodName: "GetAllTx",
			Handler:    _SlaveServerSideOp_GetAllTx_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _SlaveServerSideOp_GetLogs_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _SlaveServerSideOp_EstimateGas_Handler,
		},
		{
			MethodName: "GetStorageAt",
			Handler:    _SlaveServerSideOp_GetStorageAt_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _SlaveServerSideOp_GetCode_Handler,
		},
		{
			MethodName: "GasPrice",
			Handler:    _SlaveServerSideOp_GasPrice_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _SlaveServerSideOp_GetWork_Handler,
		},
		{
			MethodName: "SubmitWork",
			Handler:    _SlaveServerSideOp_SubmitWork_Handler,
		},
		{
			MethodName: "AddXshardTxList",
			Handler:    _SlaveServerSideOp_AddXshardTxList_Handler,
		},
		{
			MethodName: "BatchAddXshardTxList",
			Handler:    _SlaveServerSideOp_BatchAddXshardTxList_Handler,
		},
		{
			MethodName: "AddMinorBlockListForSync",
			Handler:    _SlaveServerSideOp_AddMinorBlockListForSync_Handler,
		},
		{
			MethodName: "SetMining",
			Handler:    _SlaveServerSideOp_SetMining_Handler,
		},
		{
			MethodName: "CheckMinorBlocksInRoot",
			Handler:    _SlaveServerSideOp_CheckMinorBlocksInRoot_Handler,
		},
		{
			MethodName: "GetMinorBlockList",
			Handler:    _SlaveServerSideOp_GetMinorBlockList_Handler,
		},
		{
			MethodName: "GetMinorBlockHeaderList",
			Handler:    _SlaveServerSideOp_GetMinorBlockHeaderList_Handler,
		},
		{
			MethodName: "HandleNewTip",
			Handler:    _SlaveServerSideOp_HandleNewTip_Handler,
		},
		{
			MethodName: "AddTransactions",
			Handler:    _SlaveServerSideOp_AddTransactions_Handler,
		},
		{
			MethodName: "HandleNewMinorBlock",
			Handler:    _SlaveServerSideOp_HandleNewMinorBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
