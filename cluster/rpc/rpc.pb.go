// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// request data
type Request struct {
	Op                   uint32   `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	RpcId                int64    `protobuf:"varint,2,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetOp() uint32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *Request) GetRpcId() int64 {
	if m != nil {
		return m.RpcId
	}
	return 0
}

func (m *Request) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// response data
type Response struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	RpcId                int64    `protobuf:"varint,2,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Response) GetRpcId() int64 {
	if m != nil {
		return m.RpcId
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "rpc.Request")
	proto.RegisterType((*Response)(nil), "rpc.Response")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4d, 0x6f, 0x1a, 0x3d,
	0x14, 0x85, 0x5f, 0x48, 0xc8, 0xc7, 0x0d, 0x24, 0xca, 0x24, 0xd1, 0x8b, 0xda, 0x0d, 0x42, 0x6a,
	0x45, 0x3f, 0x42, 0x23, 0x08, 0x55, 0x17, 0xdd, 0x0c, 0x04, 0x4d, 0x22, 0x25, 0x2d, 0x9a, 0xa1,
	0x6a, 0x77, 0x95, 0x63, 0xdf, 0x80, 0x15, 0xb0, 0x5d, 0xdb, 0xa4, 0xe4, 0x6f, 0xf6, 0xdf, 0x74,
	0x57, 0x91, 0x41, 0xc0, 0x48, 0xad, 0x6c, 0x76, 0xa0, 0x39, 0x8f, 0xef, 0xf1, 0xbd, 0xc7, 0x36,
	0xec, 0x6a, 0x45, 0xeb, 0x4a, 0x4b, 0x2b, 0x83, 0x0d, 0xad, 0x68, 0xf5, 0x02, 0xb6, 0x63, 0xfc,
	0x31, 0x41, 0x63, 0x83, 0x7d, 0xc8, 0x4b, 0x55, 0xce, 0x55, 0x72, 0xb5, 0x52, 0x9c, 0x97, 0x2a,
	0x38, 0x81, 0x2d, 0xad, 0xe8, 0x77, 0xce, 0xca, 0xf9, 0x4a, 0xae, 0xb6, 0x11, 0x17, 0xb4, 0xa2,
	0x57, 0x2c, 0x08, 0x60, 0x93, 0x11, 0x4b, 0xca, 0x85, 0x4a, 0xae, 0x56, 0x8c, 0x9f, 0x7e, 0x57,
	0x5b, 0xb0, 0x13, 0xa3, 0x51, 0x52, 0x18, 0x5c, 0x7c, 0xcf, 0x2d, 0xbf, 0xff, 0x63, 0xa9, 0xc6,
	0xaf, 0x3c, 0x04, 0x37, 0xc4, 0x58, 0xd4, 0x09, 0xea, 0x07, 0xd4, 0x09, 0x67, 0xf8, 0x59, 0x05,
	0xe7, 0x70, 0x14, 0x32, 0x76, 0xc3, 0x85, 0xd4, 0xed, 0x91, 0xa4, 0xf7, 0x97, 0x48, 0x18, 0xea,
	0xa0, 0x58, 0x9f, 0x79, 0x9f, 0xbb, 0x7d, 0x56, 0x9a, 0xff, 0x4b, 0xab, 0x56, 0xff, 0x0b, 0xce,
	0xe0, 0xa0, 0xad, 0x25, 0x61, 0x94, 0x18, 0xfb, 0x09, 0x7f, 0xf6, 0xb9, 0x72, 0x11, 0xef, 0xe1,
	0x64, 0x41, 0xf4, 0x35, 0x11, 0x86, 0x50, 0xcb, 0xa5, 0x30, 0x2e, 0xee, 0x1c, 0x8e, 0x16, 0xdc,
	0xd2, 0xa5, 0x8b, 0x7a, 0x07, 0xfb, 0x11, 0xae, 0xe8, 0x9d, 0x65, 0x5a, 0x70, 0x9c, 0x01, 0xd2,
	0x36, 0xb8, 0xb0, 0xc6, 0xef, 0x3d, 0x38, 0x4c, 0x46, 0xe4, 0x01, 0x33, 0x3d, 0x7d, 0x0d, 0xbb,
	0x43, 0x24, 0xda, 0xb6, 0x91, 0x58, 0x57, 0xe1, 0x37, 0x00, 0xe9, 0x54, 0xae, 0xc4, 0x9d, 0x74,
	0x89, 0x5f, 0xc0, 0x66, 0x8f, 0x8b, 0x81, 0x4b, 0x56, 0x83, 0xed, 0x74, 0x33, 0xe8, 0x52, 0xbe,
	0x84, 0x42, 0x84, 0xa2, 0x3f, 0x75, 0xe9, 0x4e, 0xa1, 0x18, 0x32, 0x16, 0x4b, 0x69, 0xd7, 0x68,
	0x7f, 0x97, 0xca, 0xd9, 0xa6, 0xae, 0xb9, 0x71, 0x76, 0xa1, 0x0e, 0xa5, 0x4c, 0x0a, 0x3d, 0xd2,
	0x14, 0xa1, 0xfd, 0x22, 0xa8, 0x14, 0x77, 0x5c, 0x8f, 0x91, 0xf9, 0xcd, 0x6b, 0x6e, 0x2c, 0xa4,
	0x54, 0x4e, 0x84, 0xbd, 0x98, 0x9d, 0x16, 0x37, 0x10, 0x32, 0xb6, 0x12, 0x58, 0x17, 0xf0, 0x11,
	0x9e, 0x77, 0x34, 0x12, 0x8b, 0x9d, 0xd1, 0x64, 0x36, 0xd6, 0x1e, 0xa2, 0xee, 0x48, 0x21, 0xd0,
	0x8b, 0xae, 0x43, 0x29, 0x13, 0x43, 0xbf, 0xfd, 0xac, 0x61, 0xaf, 0x09, 0x41, 0xf2, 0x28, 0xe8,
	0xb2, 0x82, 0xcf, 0x74, 0x9a, 0x10, 0x74, 0xa7, 0x48, 0x27, 0x16, 0xd7, 0xa8, 0x94, 0x8e, 0x68,
	0x05, 0x88, 0x91, 0x22, 0x57, 0xd6, 0xa3, 0x81, 0x59, 0x6e, 0xe6, 0xb0, 0xfd, 0x18, 0x32, 0xa6,
	0xd1, 0x18, 0xbf, 0xe8, 0x5f, 0xcb, 0x81, 0x53, 0xf9, 0x16, 0xf6, 0xba, 0xc6, 0xf2, 0x31, 0xb1,
	0x18, 0x11, 0xe3, 0x71, 0x00, 0x22, 0xb4, 0x89, 0x95, 0x9a, 0x0c, 0x30, 0xb4, 0x7e, 0x36, 0x3a,
	0x92, 0x39, 0x4f, 0xe0, 0x2b, 0xd8, 0x89, 0x88, 0xe9, 0x69, 0x4e, 0xd1, 0x6f, 0xd1, 0xaf, 0x52,
	0xdf, 0x7b, 0x5c, 0x2a, 0xc9, 0xe4, 0x76, 0xcc, 0xbd, 0xc4, 0x67, 0x70, 0x10, 0x32, 0xf6, 0xcd,
	0x0c, 0x89, 0x66, 0xfd, 0xa9, 0x4f, 0x1e, 0x5a, 0x70, 0xdc, 0x26, 0x96, 0x0e, 0xd7, 0xc4, 0x1a,
	0x70, 0x98, 0x09, 0xb7, 0x0f, 0xf3, 0x01, 0xfe, 0xff, 0xcb, 0xbd, 0xec, 0x43, 0x9e, 0x42, 0xf1,
	0x92, 0x08, 0x36, 0x42, 0xbf, 0xf7, 0x29, 0xed, 0xc2, 0x1a, 0x2f, 0xd3, 0xed, 0xd6, 0xd3, 0xcb,
	0xde, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xdf, 0x69, 0x5f, 0xe6, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MasterServerSideOpClient is the client API for MasterServerSideOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterServerSideOpClient interface {
	AddMinorBlockHeader(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// p2p apis
	BroadcastNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BroadcastTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BroadcastMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlocks(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlockHeaders(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type masterServerSideOpClient struct {
	cc *grpc.ClientConn
}

func NewMasterServerSideOpClient(cc *grpc.ClientConn) MasterServerSideOpClient {
	return &masterServerSideOpClient{cc}
}

func (c *masterServerSideOpClient) AddMinorBlockHeader(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/AddMinorBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) BroadcastNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/BroadcastNewTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) BroadcastTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/BroadcastTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) BroadcastMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/BroadcastMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) GetMinorBlocks(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/GetMinorBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServerSideOpClient) GetMinorBlockHeaders(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.MasterServerSideOp/GetMinorBlockHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServerSideOpServer is the server API for MasterServerSideOp service.
type MasterServerSideOpServer interface {
	AddMinorBlockHeader(context.Context, *Request) (*Response, error)
	// p2p apis
	BroadcastNewTip(context.Context, *Request) (*Response, error)
	BroadcastTransactions(context.Context, *Request) (*Response, error)
	BroadcastMinorBlock(context.Context, *Request) (*Response, error)
	GetMinorBlocks(context.Context, *Request) (*Response, error)
	GetMinorBlockHeaders(context.Context, *Request) (*Response, error)
}

func RegisterMasterServerSideOpServer(s *grpc.Server, srv MasterServerSideOpServer) {
	s.RegisterService(&_MasterServerSideOp_serviceDesc, srv)
}

func _MasterServerSideOp_AddMinorBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).AddMinorBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/AddMinorBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).AddMinorBlockHeader(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_BroadcastNewTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).BroadcastNewTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/BroadcastNewTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).BroadcastNewTip(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_BroadcastTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).BroadcastTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/BroadcastTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).BroadcastTransactions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_BroadcastMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).BroadcastMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/BroadcastMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).BroadcastMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_GetMinorBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).GetMinorBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/GetMinorBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).GetMinorBlocks(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServerSideOp_GetMinorBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServerSideOpServer).GetMinorBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MasterServerSideOp/GetMinorBlockHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServerSideOpServer).GetMinorBlockHeaders(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterServerSideOp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MasterServerSideOp",
	HandlerType: (*MasterServerSideOpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMinorBlockHeader",
			Handler:    _MasterServerSideOp_AddMinorBlockHeader_Handler,
		},
		{
			MethodName: "BroadcastNewTip",
			Handler:    _MasterServerSideOp_BroadcastNewTip_Handler,
		},
		{
			MethodName: "BroadcastTransactions",
			Handler:    _MasterServerSideOp_BroadcastTransactions_Handler,
		},
		{
			MethodName: "BroadcastMinorBlock",
			Handler:    _MasterServerSideOp_BroadcastMinorBlock_Handler,
		},
		{
			MethodName: "GetMinorBlocks",
			Handler:    _MasterServerSideOp_GetMinorBlocks_Handler,
		},
		{
			MethodName: "GetMinorBlockHeaders",
			Handler:    _MasterServerSideOp_GetMinorBlockHeaders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// SlaveServerSideOpClient is the client API for SlaveServerSideOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlaveServerSideOpClient interface {
	HeartBeat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	MasterInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// APIs for master
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMine(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GenTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddRootBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetEcoInfoList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetUnconfirmedHeaders(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAccountData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateClusterPeerConnection(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SyncMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ExecuteTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransactionReceipt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransactionListByAddress(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetLogs(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	EstimateGas(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetStorageAt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetCode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GasPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SubmitWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// APIs for neighbor slaves
	AddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BatchAddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// p2p apis
	GetMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	HandleNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type slaveServerSideOpClient struct {
	cc *grpc.ClientConn
}

func NewSlaveServerSideOpClient(cc *grpc.ClientConn) SlaveServerSideOpClient {
	return &slaveServerSideOpClient{cc}
}

func (c *slaveServerSideOpClient) HeartBeat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/heartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) MasterInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/MasterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMine(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GenTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GenTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddRootBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddRootBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetEcoInfoList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetEcoInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetUnconfirmedHeaders(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetUnconfirmedHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetAccountData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetAccountData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) CreateClusterPeerConnection(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/CreateClusterPeerConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) SyncMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/SyncMinorBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) ExecuteTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/ExecuteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetTransactionReceipt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetTransactionListByAddress(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetTransactionListByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetLogs(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) EstimateGas(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/EstimateGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetStorageAt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetStorageAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetCode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GasPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) SubmitWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/SubmitWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddXshardTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) BatchAddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/BatchAddXshardTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMinorBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) GetMinorBlockHeaderList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/GetMinorBlockHeaderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) HandleNewTip(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/HandleNewTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveServerSideOpClient) AddTransactions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SlaveServerSideOp/AddTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlaveServerSideOpServer is the server API for SlaveServerSideOp service.
type SlaveServerSideOpServer interface {
	HeartBeat(context.Context, *Request) (*Response, error)
	MasterInfo(context.Context, *Request) (*Response, error)
	// APIs for master
	Ping(context.Context, *Request) (*Response, error)
	GetMine(context.Context, *Request) (*Response, error)
	GenTx(context.Context, *Request) (*Response, error)
	AddRootBlock(context.Context, *Request) (*Response, error)
	GetEcoInfoList(context.Context, *Request) (*Response, error)
	AddMinorBlock(context.Context, *Request) (*Response, error)
	GetUnconfirmedHeaders(context.Context, *Request) (*Response, error)
	GetAccountData(context.Context, *Request) (*Response, error)
	AddTransaction(context.Context, *Request) (*Response, error)
	CreateClusterPeerConnection(context.Context, *Request) (*Response, error)
	GetMinorBlock(context.Context, *Request) (*Response, error)
	GetTransaction(context.Context, *Request) (*Response, error)
	SyncMinorBlockList(context.Context, *Request) (*Response, error)
	ExecuteTransaction(context.Context, *Request) (*Response, error)
	GetTransactionReceipt(context.Context, *Request) (*Response, error)
	GetTransactionListByAddress(context.Context, *Request) (*Response, error)
	GetLogs(context.Context, *Request) (*Response, error)
	EstimateGas(context.Context, *Request) (*Response, error)
	GetStorageAt(context.Context, *Request) (*Response, error)
	GetCode(context.Context, *Request) (*Response, error)
	GasPrice(context.Context, *Request) (*Response, error)
	GetWork(context.Context, *Request) (*Response, error)
	SubmitWork(context.Context, *Request) (*Response, error)
	// APIs for neighbor slaves
	AddXshardTxList(context.Context, *Request) (*Response, error)
	BatchAddXshardTxList(context.Context, *Request) (*Response, error)
	// p2p apis
	GetMinorBlockList(context.Context, *Request) (*Response, error)
	GetMinorBlockHeaderList(context.Context, *Request) (*Response, error)
	HandleNewTip(context.Context, *Request) (*Response, error)
	AddTransactions(context.Context, *Request) (*Response, error)
}

func RegisterSlaveServerSideOpServer(s *grpc.Server, srv SlaveServerSideOpServer) {
	s.RegisterService(&_SlaveServerSideOp_serviceDesc, srv)
}

func _SlaveServerSideOp_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).HeartBeat(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_MasterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).MasterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/MasterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).MasterInfo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMine(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GenTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GenTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GenTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GenTx(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddRootBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddRootBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddRootBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddRootBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetEcoInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetEcoInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetEcoInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetEcoInfoList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetUnconfirmedHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetUnconfirmedHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetUnconfirmedHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetUnconfirmedHeaders(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetAccountData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetAccountData(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_CreateClusterPeerConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).CreateClusterPeerConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/CreateClusterPeerConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).CreateClusterPeerConnection(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_SyncMinorBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).SyncMinorBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/SyncMinorBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).SyncMinorBlockList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_ExecuteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).ExecuteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/ExecuteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).ExecuteTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetTransactionReceipt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetTransactionListByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetTransactionListByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetTransactionListByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetTransactionListByAddress(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetLogs(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/EstimateGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).EstimateGas(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetStorageAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetStorageAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetStorageAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetStorageAt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetCode(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GasPrice(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetWork(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_SubmitWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).SubmitWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/SubmitWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).SubmitWork(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddXshardTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddXshardTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddXshardTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddXshardTxList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_BatchAddXshardTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).BatchAddXshardTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/BatchAddXshardTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).BatchAddXshardTxList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMinorBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMinorBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMinorBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMinorBlockList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_GetMinorBlockHeaderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).GetMinorBlockHeaderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/GetMinorBlockHeaderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).GetMinorBlockHeaderList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_HandleNewTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).HandleNewTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/HandleNewTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).HandleNewTip(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlaveServerSideOp_AddTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServerSideOpServer).AddTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SlaveServerSideOp/AddTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServerSideOpServer).AddTransactions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _SlaveServerSideOp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.SlaveServerSideOp",
	HandlerType: (*SlaveServerSideOpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "heartBeat",
			Handler:    _SlaveServerSideOp_HeartBeat_Handler,
		},
		{
			MethodName: "MasterInfo",
			Handler:    _SlaveServerSideOp_MasterInfo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SlaveServerSideOp_Ping_Handler,
		},
		{
			MethodName: "GetMine",
			Handler:    _SlaveServerSideOp_GetMine_Handler,
		},
		{
			MethodName: "GenTx",
			Handler:    _SlaveServerSideOp_GenTx_Handler,
		},
		{
			MethodName: "AddRootBlock",
			Handler:    _SlaveServerSideOp_AddRootBlock_Handler,
		},
		{
			MethodName: "GetEcoInfoList",
			Handler:    _SlaveServerSideOp_GetEcoInfoList_Handler,
		},
		{
			MethodName: "AddMinorBlock",
			Handler:    _SlaveServerSideOp_AddMinorBlock_Handler,
		},
		{
			MethodName: "GetUnconfirmedHeaders",
			Handler:    _SlaveServerSideOp_GetUnconfirmedHeaders_Handler,
		},
		{
			MethodName: "GetAccountData",
			Handler:    _SlaveServerSideOp_GetAccountData_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _SlaveServerSideOp_AddTransaction_Handler,
		},
		{
			MethodName: "CreateClusterPeerConnection",
			Handler:    _SlaveServerSideOp_CreateClusterPeerConnection_Handler,
		},
		{
			MethodName: "GetMinorBlock",
			Handler:    _SlaveServerSideOp_GetMinorBlock_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _SlaveServerSideOp_GetTransaction_Handler,
		},
		{
			MethodName: "SyncMinorBlockList",
			Handler:    _SlaveServerSideOp_SyncMinorBlockList_Handler,
		},
		{
			MethodName: "ExecuteTransaction",
			Handler:    _SlaveServerSideOp_ExecuteTransaction_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _SlaveServerSideOp_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "GetTransactionListByAddress",
			Handler:    _SlaveServerSideOp_GetTransactionListByAddress_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _SlaveServerSideOp_GetLogs_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _SlaveServerSideOp_EstimateGas_Handler,
		},
		{
			MethodName: "GetStorageAt",
			Handler:    _SlaveServerSideOp_GetStorageAt_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _SlaveServerSideOp_GetCode_Handler,
		},
		{
			MethodName: "GasPrice",
			Handler:    _SlaveServerSideOp_GasPrice_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _SlaveServerSideOp_GetWork_Handler,
		},
		{
			MethodName: "SubmitWork",
			Handler:    _SlaveServerSideOp_SubmitWork_Handler,
		},
		{
			MethodName: "AddXshardTxList",
			Handler:    _SlaveServerSideOp_AddXshardTxList_Handler,
		},
		{
			MethodName: "BatchAddXshardTxList",
			Handler:    _SlaveServerSideOp_BatchAddXshardTxList_Handler,
		},
		{
			MethodName: "GetMinorBlockList",
			Handler:    _SlaveServerSideOp_GetMinorBlockList_Handler,
		},
		{
			MethodName: "GetMinorBlockHeaderList",
			Handler:    _SlaveServerSideOp_GetMinorBlockHeaderList_Handler,
		},
		{
			MethodName: "HandleNewTip",
			Handler:    _SlaveServerSideOp_HandleNewTip_Handler,
		},
		{
			MethodName: "AddTransactions",
			Handler:    _SlaveServerSideOp_AddTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
