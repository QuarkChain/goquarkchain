// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 请求数据
type Request struct {
	Op                   int64    `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetOp() int64 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *Request) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 响应数据
type Response struct {
	RpcId                int64    `protobuf:"varint,2,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ErrorCode            int64    `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetRpcId() int64 {
	if m != nil {
		return m.RpcId
	}
	return 0
}

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Response) GetErrorCode() int64 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "rpc.Request")
	proto.RegisterType((*Response)(nil), "rpc.Response")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xef, 0x4f, 0x14, 0x3d,
	0x10, 0xc7, 0x9f, 0xf2, 0x9b, 0xe1, 0xc7, 0x93, 0xa7, 0x8f, 0x24, 0x17, 0x8d, 0x09, 0xc1, 0xa8,
	0x55, 0xe4, 0xc0, 0x43, 0xd0, 0x17, 0xc6, 0xe4, 0x38, 0x70, 0x25, 0x01, 0x21, 0x77, 0x67, 0xf4,
	0x1d, 0x29, 0xed, 0x00, 0x1b, 0xb9, 0xce, 0xda, 0xf6, 0xc8, 0xf1, 0x37, 0xf9, 0xde, 0xbf, 0xcf,
	0xdc, 0x2e, 0x59, 0x24, 0x31, 0xd9, 0xf6, 0xf4, 0xdd, 0xdd, 0x66, 0xbe, 0xed, 0x74, 0x66, 0xfa,
	0xf9, 0xee, 0xc2, 0xac, 0xcd, 0x54, 0x3d, 0xb3, 0xe4, 0x89, 0x8f, 0xdb, 0x4c, 0xad, 0xac, 0xc1,
	0x74, 0x1b, 0xbf, 0xf5, 0xd1, 0x79, 0xbe, 0x08, 0x63, 0x94, 0xd5, 0xd8, 0x32, 0x13, 0xe3, 0xed,
	0x31, 0xca, 0x38, 0x87, 0x09, 0x2d, 0xbd, 0xac, 0x4d, 0x2e, 0x33, 0x31, 0xdf, 0xce, 0x7f, 0xaf,
	0x74, 0x61, 0xa6, 0x8d, 0x2e, 0x23, 0xe3, 0x90, 0x2f, 0xc1, 0x94, 0xcd, 0xd4, 0x49, 0xaa, 0x6b,
	0x63, 0xb9, 0x66, 0xd2, 0x66, 0x6a, 0x5f, 0x97, 0x32, 0x76, 0x2b, 0xe3, 0x0f, 0x01, 0xd0, 0x5a,
	0xb2, 0x27, 0x8a, 0x34, 0xd6, 0xc6, 0xf3, 0xf0, 0xd9, 0xfc, 0x49, 0x8b, 0x34, 0x36, 0xbe, 0xcf,
	0xc1, 0x4c, 0x8b, 0x7a, 0x3d, 0x32, 0x47, 0x19, 0x7f, 0x0c, 0x13, 0xc7, 0xa9, 0x39, 0xe7, 0xf3,
	0xf5, 0x61, 0xaa, 0x37, 0xc9, 0xdd, 0x5f, 0xb8, 0xf9, 0x57, 0xec, 0xbd, 0xf2, 0x0f, 0xdf, 0x80,
	0x7f, 0x5b, 0x64, 0x0c, 0x2a, 0xdf, 0xa5, 0xce, 0xa5, 0xbc, 0x42, 0x57, 0xa5, 0x58, 0x83, 0xf9,
	0xa6, 0xd6, 0x6d, 0x22, 0xbf, 0x73, 0x49, 0xea, 0x6b, 0x55, 0xf8, 0x3a, 0x2c, 0x26, 0xe8, 0xf7,
	0x14, 0xed, 0x9b, 0x33, 0x3a, 0x48, 0x9d, 0xaf, 0x12, 0x6c, 0x02, 0x4f, 0xd0, 0x7f, 0xc4, 0x41,
	0xb1, 0x7e, 0x97, 0x0e, 0x53, 0x83, 0x55, 0xa2, 0x6d, 0x58, 0x4a, 0xd0, 0x7f, 0x32, 0x8a, 0xcc,
	0x59, 0x6a, 0x7b, 0xa8, 0x3f, 0xa0, 0xd4, 0x68, 0x5d, 0x58, 0x76, 0x4d, 0xa5, 0xa8, 0x6f, 0xfc,
	0xee, 0xb0, 0xc6, 0xd5, 0x82, 0xa6, 0xd6, 0x5d, 0x2b, 0x8d, 0x93, 0xca, 0xa7, 0x64, 0xaa, 0x04,
	0xaf, 0xe0, 0xff, 0xa6, 0xd6, 0x87, 0xa9, 0x21, 0x9b, 0x9f, 0xa7, 0x48, 0x2c, 0xa0, 0x2d, 0x4d,
	0xad, 0xbf, 0xb8, 0x0b, 0x69, 0x75, 0x77, 0x10, 0x58, 0xb6, 0xce, 0xb5, 0x51, 0xb7, 0x1b, 0x85,
	0x88, 0xea, 0xb0, 0x70, 0x27, 0xb9, 0xaa, 0xf8, 0xb7, 0xf0, 0xa0, 0x65, 0x51, 0x7a, 0x6c, 0x5d,
	0xf6, 0x9d, 0x47, 0x7b, 0x8c, 0x68, 0x6f, 0xc6, 0x27, 0xa0, 0x14, 0xbb, 0xf0, 0x68, 0x17, 0x9d,
	0xb7, 0x74, 0xfd, 0x5b, 0xf9, 0x70, 0x74, 0xa5, 0xd1, 0x01, 0x39, 0x27, 0xe8, 0xc3, 0x73, 0x2e,
	0x5a, 0x1c, 0xd1, 0xb1, 0x2d, 0xb8, 0xb7, 0x23, 0xbd, 0xba, 0x88, 0x6f, 0xc0, 0xde, 0x00, 0x55,
	0xdf, 0x63, 0xc4, 0x5e, 0xc5, 0xdc, 0xfe, 0x22, 0x68, 0xa3, 0xc2, 0x34, 0xab, 0xdc, 0x4c, 0xc0,
	0x74, 0x51, 0x84, 0xca, 0x9b, 0xf1, 0x04, 0x26, 0x13, 0x34, 0xdd, 0x41, 0x40, 0x6b, 0xef, 0x66,
	0x32, 0x3c, 0xf3, 0xce, 0x75, 0x53, 0x6b, 0x8b, 0xce, 0x85, 0xe5, 0x73, 0x40, 0xe7, 0x95, 0x91,
	0x2f, 0x60, 0x6e, 0xcf, 0xf9, 0xb4, 0x27, 0x3d, 0x26, 0x32, 0x04, 0x36, 0x09, 0xfa, 0x8e, 0x27,
	0x2b, 0xcf, 0xb1, 0x19, 0x58, 0x96, 0x21, 0x0c, 0xab, 0x22, 0x9f, 0xc1, 0x4c, 0x22, 0xdd, 0xb1,
	0x4d, 0x15, 0x86, 0x2d, 0xfa, 0x99, 0x6c, 0xe5, 0xa8, 0xad, 0x02, 0x74, 0xfa, 0xa7, 0xbd, 0x34,
	0x24, 0xb8, 0x71, 0x00, 0xfc, 0x50, 0x0e, 0x6f, 0x41, 0x07, 0xed, 0x15, 0xda, 0x4e, 0xaa, 0xf1,
	0x28, 0xe3, 0xdb, 0xa3, 0xe0, 0x42, 0xb0, 0xc6, 0x8f, 0x39, 0xf8, 0x2f, 0xe7, 0xf7, 0x9d, 0xd5,
	0x9e, 0x06, 0x99, 0x80, 0x60, 0xbc, 0x11, 0x6b, 0x03, 0x82, 0xf1, 0xe7, 0xa1, 0x33, 0x28, 0x18,
	0x17, 0x61, 0x53, 0x28, 0x18, 0x5f, 0x8f, 0xb2, 0x17, 0xc1, 0xf8, 0xcb, 0x48, 0x83, 0x11, 0x8c,
	0x6f, 0x8d, 0x60, 0x31, 0x82, 0xf1, 0x8d, 0x38, 0x5a, 0x0a, 0xc6, 0xdf, 0x8c, 0x66, 0x4b, 0xe5,
	0xa9, 0xc2, 0x8d, 0xa9, 0x90, 0x44, 0x59, 0x93, 0x60, 0xfc, 0xdd, 0x9f, 0xf0, 0x5c, 0x30, 0xfe,
	0xfe, 0x6f, 0x10, 0xbd, 0xa8, 0x6c, 0x0c, 0xd3, 0xcb, 0xfa, 0x44, 0x1d, 0x76, 0x6b, 0x04, 0x87,
	0x2c, 0x64, 0xd1, 0x5c, 0x2f, 0x5b, 0x1f, 0x4d, 0xf6, 0xa2, 0x29, 0xa3, 0x93, 0xb8, 0xbc, 0x97,
	0x01, 0x2c, 0x16, 0x8c, 0xd7, 0x63, 0x68, 0x5c, 0xdc, 0xce, 0x08, 0x1e, 0x97, 0xc9, 0x04, 0x10,
	0x59, 0x30, 0xbe, 0x1a, 0xcc, 0xe4, 0x72, 0xe1, 0x00, 0xd0, 0x0a, 0xc6, 0xd7, 0x22, 0xb8, 0x5c,
	0xc0, 0x30, 0xce, 0xfb, 0x05, 0xe3, 0xaf, 0x47, 0x7a, 0x69, 0x10, 0xec, 0x74, 0x2a, 0xff, 0x8a,
	0xd8, 0xfc, 0x19, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x70, 0x35, 0x16, 0x52, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommonOpClient is the client API for CommonOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommonOpClient interface {
	// 服务端（master）等待slave完成与其连接
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 当所有的slave都启动完成后，master向所有的slave发送配置slave的配置列表
	ConnectToSlaves(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddRootBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetEcoInfoList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetNextBlockToMine(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetUnconfirmedHeaders(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAccountData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddMinorBlockHeader(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SyncMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateClusterPeerConnection(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DestroyClusterPeerConnectionCommand(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// get minor block request
	GetMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BatchAddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ExecuteTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransactionReceipt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetMine(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GenTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetTransactionListByAddress(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetLogs(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	EstimateGas(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetStorageAt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetCode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GasPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SubmitWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type commonOpClient struct {
	cc *grpc.ClientConn
}

func NewCommonOpClient(cc *grpc.ClientConn) CommonOpClient {
	return &commonOpClient{cc}
}

func (c *commonOpClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) ConnectToSlaves(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/ConnectToSlaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) AddRootBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/AddRootBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetEcoInfoList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetEcoInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetNextBlockToMine(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetNextBlockToMine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetUnconfirmedHeaders(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetUnconfirmedHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetAccountData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetAccountData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) AddTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/AddTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) AddMinorBlockHeader(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/AddMinorBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) AddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/AddXshardTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) SyncMinorBlockList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/SyncMinorBlockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) AddMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/AddMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) CreateClusterPeerConnection(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/CreateClusterPeerConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) DestroyClusterPeerConnectionCommand(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/DestroyClusterPeerConnectionCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetMinorBlock(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetMinorBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) BatchAddXshardTxList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/BatchAddXshardTxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) ExecuteTransaction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/ExecuteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetTransactionReceipt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetMine(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetMine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GenTx(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GenTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetTransactionListByAddress(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetTransactionListByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetLogs(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) EstimateGas(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/EstimateGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetStorageAt(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetStorageAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetCode(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GasPrice(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) GetWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonOpClient) SubmitWork(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.CommonOp/SubmitWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonOpServer is the server API for CommonOp service.
type CommonOpServer interface {
	// 服务端（master）等待slave完成与其连接
	Ping(context.Context, *Request) (*Response, error)
	// 当所有的slave都启动完成后，master向所有的slave发送配置slave的配置列表
	ConnectToSlaves(context.Context, *Request) (*Response, error)
	AddRootBlock(context.Context, *Request) (*Response, error)
	GetEcoInfoList(context.Context, *Request) (*Response, error)
	GetNextBlockToMine(context.Context, *Request) (*Response, error)
	GetUnconfirmedHeaders(context.Context, *Request) (*Response, error)
	GetAccountData(context.Context, *Request) (*Response, error)
	AddTransaction(context.Context, *Request) (*Response, error)
	AddMinorBlockHeader(context.Context, *Request) (*Response, error)
	AddXshardTxList(context.Context, *Request) (*Response, error)
	SyncMinorBlockList(context.Context, *Request) (*Response, error)
	AddMinorBlock(context.Context, *Request) (*Response, error)
	CreateClusterPeerConnection(context.Context, *Request) (*Response, error)
	DestroyClusterPeerConnectionCommand(context.Context, *Request) (*Response, error)
	// get minor block request
	GetMinorBlock(context.Context, *Request) (*Response, error)
	GetTransaction(context.Context, *Request) (*Response, error)
	BatchAddXshardTxList(context.Context, *Request) (*Response, error)
	ExecuteTransaction(context.Context, *Request) (*Response, error)
	GetTransactionReceipt(context.Context, *Request) (*Response, error)
	GetMine(context.Context, *Request) (*Response, error)
	GenTx(context.Context, *Request) (*Response, error)
	GetTransactionListByAddress(context.Context, *Request) (*Response, error)
	GetLogs(context.Context, *Request) (*Response, error)
	EstimateGas(context.Context, *Request) (*Response, error)
	GetStorageAt(context.Context, *Request) (*Response, error)
	GetCode(context.Context, *Request) (*Response, error)
	GasPrice(context.Context, *Request) (*Response, error)
	GetWork(context.Context, *Request) (*Response, error)
	SubmitWork(context.Context, *Request) (*Response, error)
}

func RegisterCommonOpServer(s *grpc.Server, srv CommonOpServer) {
	s.RegisterService(&_CommonOp_serviceDesc, srv)
}

func _CommonOp_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_ConnectToSlaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).ConnectToSlaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/ConnectToSlaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).ConnectToSlaves(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_AddRootBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).AddRootBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/AddRootBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).AddRootBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetEcoInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetEcoInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetEcoInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetEcoInfoList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetNextBlockToMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetNextBlockToMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetNextBlockToMine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetNextBlockToMine(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetUnconfirmedHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetUnconfirmedHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetUnconfirmedHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetUnconfirmedHeaders(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetAccountData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetAccountData(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/AddTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).AddTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_AddMinorBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).AddMinorBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/AddMinorBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).AddMinorBlockHeader(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_AddXshardTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).AddXshardTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/AddXshardTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).AddXshardTxList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_SyncMinorBlockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).SyncMinorBlockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/SyncMinorBlockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).SyncMinorBlockList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_AddMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).AddMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/AddMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).AddMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_CreateClusterPeerConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).CreateClusterPeerConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/CreateClusterPeerConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).CreateClusterPeerConnection(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_DestroyClusterPeerConnectionCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).DestroyClusterPeerConnectionCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/DestroyClusterPeerConnectionCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).DestroyClusterPeerConnectionCommand(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetMinorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetMinorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetMinorBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetMinorBlock(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_BatchAddXshardTxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).BatchAddXshardTxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/BatchAddXshardTxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).BatchAddXshardTxList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_ExecuteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).ExecuteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/ExecuteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).ExecuteTransaction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetTransactionReceipt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetMine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetMine(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GenTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GenTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GenTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GenTx(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetTransactionListByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetTransactionListByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetTransactionListByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetTransactionListByAddress(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetLogs(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/EstimateGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).EstimateGas(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetStorageAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetStorageAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetStorageAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetStorageAt(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetCode(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GasPrice(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).GetWork(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonOp_SubmitWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonOpServer).SubmitWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CommonOp/SubmitWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonOpServer).SubmitWork(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommonOp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.CommonOp",
	HandlerType: (*CommonOpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CommonOp_Ping_Handler,
		},
		{
			MethodName: "ConnectToSlaves",
			Handler:    _CommonOp_ConnectToSlaves_Handler,
		},
		{
			MethodName: "AddRootBlock",
			Handler:    _CommonOp_AddRootBlock_Handler,
		},
		{
			MethodName: "GetEcoInfoList",
			Handler:    _CommonOp_GetEcoInfoList_Handler,
		},
		{
			MethodName: "GetNextBlockToMine",
			Handler:    _CommonOp_GetNextBlockToMine_Handler,
		},
		{
			MethodName: "GetUnconfirmedHeaders",
			Handler:    _CommonOp_GetUnconfirmedHeaders_Handler,
		},
		{
			MethodName: "GetAccountData",
			Handler:    _CommonOp_GetAccountData_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _CommonOp_AddTransaction_Handler,
		},
		{
			MethodName: "AddMinorBlockHeader",
			Handler:    _CommonOp_AddMinorBlockHeader_Handler,
		},
		{
			MethodName: "AddXshardTxList",
			Handler:    _CommonOp_AddXshardTxList_Handler,
		},
		{
			MethodName: "SyncMinorBlockList",
			Handler:    _CommonOp_SyncMinorBlockList_Handler,
		},
		{
			MethodName: "AddMinorBlock",
			Handler:    _CommonOp_AddMinorBlock_Handler,
		},
		{
			MethodName: "CreateClusterPeerConnection",
			Handler:    _CommonOp_CreateClusterPeerConnection_Handler,
		},
		{
			MethodName: "DestroyClusterPeerConnectionCommand",
			Handler:    _CommonOp_DestroyClusterPeerConnectionCommand_Handler,
		},
		{
			MethodName: "GetMinorBlock",
			Handler:    _CommonOp_GetMinorBlock_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _CommonOp_GetTransaction_Handler,
		},
		{
			MethodName: "BatchAddXshardTxList",
			Handler:    _CommonOp_BatchAddXshardTxList_Handler,
		},
		{
			MethodName: "ExecuteTransaction",
			Handler:    _CommonOp_ExecuteTransaction_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _CommonOp_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "GetMine",
			Handler:    _CommonOp_GetMine_Handler,
		},
		{
			MethodName: "GenTx",
			Handler:    _CommonOp_GenTx_Handler,
		},
		{
			MethodName: "GetTransactionListByAddress",
			Handler:    _CommonOp_GetTransactionListByAddress_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _CommonOp_GetLogs_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _CommonOp_EstimateGas_Handler,
		},
		{
			MethodName: "GetStorageAt",
			Handler:    _CommonOp_GetStorageAt_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _CommonOp_GetCode_Handler,
		},
		{
			MethodName: "GasPrice",
			Handler:    _CommonOp_GasPrice_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _CommonOp_GetWork_Handler,
		},
		{
			MethodName: "SubmitWork",
			Handler:    _CommonOp_SubmitWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// MasterServerSideOpClient is the client API for MasterServerSideOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterServerSideOpClient interface {
	AddMinorBlockHeader(ctx context.Context, opts ...grpc.CallOption) (MasterServerSideOp_AddMinorBlockHeaderClient, error)
}

type masterServerSideOpClient struct {
	cc *grpc.ClientConn
}

func NewMasterServerSideOpClient(cc *grpc.ClientConn) MasterServerSideOpClient {
	return &masterServerSideOpClient{cc}
}

func (c *masterServerSideOpClient) AddMinorBlockHeader(ctx context.Context, opts ...grpc.CallOption) (MasterServerSideOp_AddMinorBlockHeaderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MasterServerSideOp_serviceDesc.Streams[0], "/rpc.MasterServerSideOp/AddMinorBlockHeader", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterServerSideOpAddMinorBlockHeaderClient{stream}
	return x, nil
}

type MasterServerSideOp_AddMinorBlockHeaderClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type masterServerSideOpAddMinorBlockHeaderClient struct {
	grpc.ClientStream
}

func (x *masterServerSideOpAddMinorBlockHeaderClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterServerSideOpAddMinorBlockHeaderClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MasterServerSideOpServer is the server API for MasterServerSideOp service.
type MasterServerSideOpServer interface {
	AddMinorBlockHeader(MasterServerSideOp_AddMinorBlockHeaderServer) error
}

func RegisterMasterServerSideOpServer(s *grpc.Server, srv MasterServerSideOpServer) {
	s.RegisterService(&_MasterServerSideOp_serviceDesc, srv)
}

func _MasterServerSideOp_AddMinorBlockHeader_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServerSideOpServer).AddMinorBlockHeader(&masterServerSideOpAddMinorBlockHeaderServer{stream})
}

type MasterServerSideOp_AddMinorBlockHeaderServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type masterServerSideOpAddMinorBlockHeaderServer struct {
	grpc.ServerStream
}

func (x *masterServerSideOpAddMinorBlockHeaderServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterServerSideOpAddMinorBlockHeaderServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MasterServerSideOp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MasterServerSideOp",
	HandlerType: (*MasterServerSideOpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddMinorBlockHeader",
			Handler:       _MasterServerSideOp_AddMinorBlockHeader_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// SlaveServerSideOpClient is the client API for SlaveServerSideOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlaveServerSideOpClient interface {
	// APIs for master
	Ping(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_PingClient, error)
	ConnectToSlaves(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_ConnectToSlavesClient, error)
	GetMine(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetMineClient, error)
	GenTx(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GenTxClient, error)
	AddRootBlock(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_AddRootBlockClient, error)
	GetEcoInfoList(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetEcoInfoListClient, error)
	GetNextBlockToMine(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetNextBlockToMineClient, error)
	AddMinorBlock(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_AddMinorBlockClient, error)
	GetUnconfirmedHeaders(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetUnconfirmedHeadersClient, error)
	GetAccountData(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetAccountDataClient, error)
	AddTransaction(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_AddTransactionClient, error)
	CreateClusterPeerConnection(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_CreateClusterPeerConnectionClient, error)
	DestroyClusterPeerConnectionCommand(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_DestroyClusterPeerConnectionCommandClient, error)
	GetMinorBlock(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetMinorBlockClient, error)
	GetTransaction(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetTransactionClient, error)
	SyncMinorBlockList(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_SyncMinorBlockListClient, error)
	ExecuteTransaction(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_ExecuteTransactionClient, error)
	GetTransactionReceipt(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetTransactionReceiptClient, error)
	GetTransactionListByAddress(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetTransactionListByAddressClient, error)
	GetLogs(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetLogsClient, error)
	EstimateGas(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_EstimateGasClient, error)
	GetStorageAt(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetStorageAtClient, error)
	GetCode(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetCodeClient, error)
	GasPrice(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GasPriceClient, error)
	GetWork(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetWorkClient, error)
	SubmitWork(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_SubmitWorkClient, error)
	// APIs for neighbor slaves
	AddXshardTxList(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_AddXshardTxListClient, error)
	BatchAddXshardTxList(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_BatchAddXshardTxListClient, error)
}

type slaveServerSideOpClient struct {
	cc *grpc.ClientConn
}

func NewSlaveServerSideOpClient(cc *grpc.ClientConn) SlaveServerSideOpClient {
	return &slaveServerSideOpClient{cc}
}

func (c *slaveServerSideOpClient) Ping(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[0], "/rpc.SlaveServerSideOp/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpPingClient{stream}
	return x, nil
}

type SlaveServerSideOp_PingClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpPingClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpPingClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpPingClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) ConnectToSlaves(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_ConnectToSlavesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[1], "/rpc.SlaveServerSideOp/ConnectToSlaves", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpConnectToSlavesClient{stream}
	return x, nil
}

type SlaveServerSideOp_ConnectToSlavesClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpConnectToSlavesClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpConnectToSlavesClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpConnectToSlavesClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetMine(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetMineClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[2], "/rpc.SlaveServerSideOp/GetMine", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetMineClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetMineClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetMineClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetMineClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetMineClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GenTx(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GenTxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[3], "/rpc.SlaveServerSideOp/GenTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGenTxClient{stream}
	return x, nil
}

type SlaveServerSideOp_GenTxClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGenTxClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGenTxClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGenTxClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) AddRootBlock(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_AddRootBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[4], "/rpc.SlaveServerSideOp/AddRootBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpAddRootBlockClient{stream}
	return x, nil
}

type SlaveServerSideOp_AddRootBlockClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpAddRootBlockClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpAddRootBlockClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpAddRootBlockClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetEcoInfoList(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetEcoInfoListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[5], "/rpc.SlaveServerSideOp/GetEcoInfoList", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetEcoInfoListClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetEcoInfoListClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetEcoInfoListClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetEcoInfoListClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetEcoInfoListClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetNextBlockToMine(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetNextBlockToMineClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[6], "/rpc.SlaveServerSideOp/GetNextBlockToMine", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetNextBlockToMineClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetNextBlockToMineClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetNextBlockToMineClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetNextBlockToMineClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetNextBlockToMineClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) AddMinorBlock(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_AddMinorBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[7], "/rpc.SlaveServerSideOp/AddMinorBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpAddMinorBlockClient{stream}
	return x, nil
}

type SlaveServerSideOp_AddMinorBlockClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpAddMinorBlockClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpAddMinorBlockClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpAddMinorBlockClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetUnconfirmedHeaders(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetUnconfirmedHeadersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[8], "/rpc.SlaveServerSideOp/GetUnconfirmedHeaders", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetUnconfirmedHeadersClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetUnconfirmedHeadersClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetUnconfirmedHeadersClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetUnconfirmedHeadersClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetUnconfirmedHeadersClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetAccountData(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetAccountDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[9], "/rpc.SlaveServerSideOp/GetAccountData", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetAccountDataClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetAccountDataClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetAccountDataClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetAccountDataClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetAccountDataClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) AddTransaction(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_AddTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[10], "/rpc.SlaveServerSideOp/AddTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpAddTransactionClient{stream}
	return x, nil
}

type SlaveServerSideOp_AddTransactionClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpAddTransactionClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpAddTransactionClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpAddTransactionClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) CreateClusterPeerConnection(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_CreateClusterPeerConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[11], "/rpc.SlaveServerSideOp/CreateClusterPeerConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpCreateClusterPeerConnectionClient{stream}
	return x, nil
}

type SlaveServerSideOp_CreateClusterPeerConnectionClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpCreateClusterPeerConnectionClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpCreateClusterPeerConnectionClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpCreateClusterPeerConnectionClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) DestroyClusterPeerConnectionCommand(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_DestroyClusterPeerConnectionCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[12], "/rpc.SlaveServerSideOp/DestroyClusterPeerConnectionCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpDestroyClusterPeerConnectionCommandClient{stream}
	return x, nil
}

type SlaveServerSideOp_DestroyClusterPeerConnectionCommandClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpDestroyClusterPeerConnectionCommandClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpDestroyClusterPeerConnectionCommandClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpDestroyClusterPeerConnectionCommandClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetMinorBlock(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetMinorBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[13], "/rpc.SlaveServerSideOp/GetMinorBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetMinorBlockClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetMinorBlockClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetMinorBlockClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetMinorBlockClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetMinorBlockClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetTransaction(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[14], "/rpc.SlaveServerSideOp/GetTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetTransactionClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetTransactionClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetTransactionClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetTransactionClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetTransactionClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) SyncMinorBlockList(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_SyncMinorBlockListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[15], "/rpc.SlaveServerSideOp/SyncMinorBlockList", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpSyncMinorBlockListClient{stream}
	return x, nil
}

type SlaveServerSideOp_SyncMinorBlockListClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpSyncMinorBlockListClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpSyncMinorBlockListClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpSyncMinorBlockListClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) ExecuteTransaction(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_ExecuteTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[16], "/rpc.SlaveServerSideOp/ExecuteTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpExecuteTransactionClient{stream}
	return x, nil
}

type SlaveServerSideOp_ExecuteTransactionClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpExecuteTransactionClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpExecuteTransactionClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpExecuteTransactionClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetTransactionReceipt(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetTransactionReceiptClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[17], "/rpc.SlaveServerSideOp/GetTransactionReceipt", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetTransactionReceiptClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetTransactionReceiptClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetTransactionReceiptClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetTransactionReceiptClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetTransactionReceiptClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetTransactionListByAddress(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetTransactionListByAddressClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[18], "/rpc.SlaveServerSideOp/GetTransactionListByAddress", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetTransactionListByAddressClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetTransactionListByAddressClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetTransactionListByAddressClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetTransactionListByAddressClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetTransactionListByAddressClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetLogs(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[19], "/rpc.SlaveServerSideOp/GetLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetLogsClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetLogsClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetLogsClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetLogsClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetLogsClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) EstimateGas(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_EstimateGasClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[20], "/rpc.SlaveServerSideOp/EstimateGas", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpEstimateGasClient{stream}
	return x, nil
}

type SlaveServerSideOp_EstimateGasClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpEstimateGasClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpEstimateGasClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpEstimateGasClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetStorageAt(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetStorageAtClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[21], "/rpc.SlaveServerSideOp/GetStorageAt", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetStorageAtClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetStorageAtClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetStorageAtClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetStorageAtClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetStorageAtClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetCode(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetCodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[22], "/rpc.SlaveServerSideOp/GetCode", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetCodeClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetCodeClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetCodeClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetCodeClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetCodeClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GasPrice(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GasPriceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[23], "/rpc.SlaveServerSideOp/GasPrice", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGasPriceClient{stream}
	return x, nil
}

type SlaveServerSideOp_GasPriceClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGasPriceClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGasPriceClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGasPriceClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) GetWork(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_GetWorkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[24], "/rpc.SlaveServerSideOp/GetWork", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpGetWorkClient{stream}
	return x, nil
}

type SlaveServerSideOp_GetWorkClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpGetWorkClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpGetWorkClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpGetWorkClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) SubmitWork(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_SubmitWorkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[25], "/rpc.SlaveServerSideOp/SubmitWork", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpSubmitWorkClient{stream}
	return x, nil
}

type SlaveServerSideOp_SubmitWorkClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpSubmitWorkClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpSubmitWorkClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpSubmitWorkClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) AddXshardTxList(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_AddXshardTxListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[26], "/rpc.SlaveServerSideOp/AddXshardTxList", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpAddXshardTxListClient{stream}
	return x, nil
}

type SlaveServerSideOp_AddXshardTxListClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpAddXshardTxListClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpAddXshardTxListClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpAddXshardTxListClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slaveServerSideOpClient) BatchAddXshardTxList(ctx context.Context, opts ...grpc.CallOption) (SlaveServerSideOp_BatchAddXshardTxListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SlaveServerSideOp_serviceDesc.Streams[27], "/rpc.SlaveServerSideOp/BatchAddXshardTxList", opts...)
	if err != nil {
		return nil, err
	}
	x := &slaveServerSideOpBatchAddXshardTxListClient{stream}
	return x, nil
}

type SlaveServerSideOp_BatchAddXshardTxListClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type slaveServerSideOpBatchAddXshardTxListClient struct {
	grpc.ClientStream
}

func (x *slaveServerSideOpBatchAddXshardTxListClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slaveServerSideOpBatchAddXshardTxListClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SlaveServerSideOpServer is the server API for SlaveServerSideOp service.
type SlaveServerSideOpServer interface {
	// APIs for master
	Ping(SlaveServerSideOp_PingServer) error
	ConnectToSlaves(SlaveServerSideOp_ConnectToSlavesServer) error
	GetMine(SlaveServerSideOp_GetMineServer) error
	GenTx(SlaveServerSideOp_GenTxServer) error
	AddRootBlock(SlaveServerSideOp_AddRootBlockServer) error
	GetEcoInfoList(SlaveServerSideOp_GetEcoInfoListServer) error
	GetNextBlockToMine(SlaveServerSideOp_GetNextBlockToMineServer) error
	AddMinorBlock(SlaveServerSideOp_AddMinorBlockServer) error
	GetUnconfirmedHeaders(SlaveServerSideOp_GetUnconfirmedHeadersServer) error
	GetAccountData(SlaveServerSideOp_GetAccountDataServer) error
	AddTransaction(SlaveServerSideOp_AddTransactionServer) error
	CreateClusterPeerConnection(SlaveServerSideOp_CreateClusterPeerConnectionServer) error
	DestroyClusterPeerConnectionCommand(SlaveServerSideOp_DestroyClusterPeerConnectionCommandServer) error
	GetMinorBlock(SlaveServerSideOp_GetMinorBlockServer) error
	GetTransaction(SlaveServerSideOp_GetTransactionServer) error
	SyncMinorBlockList(SlaveServerSideOp_SyncMinorBlockListServer) error
	ExecuteTransaction(SlaveServerSideOp_ExecuteTransactionServer) error
	GetTransactionReceipt(SlaveServerSideOp_GetTransactionReceiptServer) error
	GetTransactionListByAddress(SlaveServerSideOp_GetTransactionListByAddressServer) error
	GetLogs(SlaveServerSideOp_GetLogsServer) error
	EstimateGas(SlaveServerSideOp_EstimateGasServer) error
	GetStorageAt(SlaveServerSideOp_GetStorageAtServer) error
	GetCode(SlaveServerSideOp_GetCodeServer) error
	GasPrice(SlaveServerSideOp_GasPriceServer) error
	GetWork(SlaveServerSideOp_GetWorkServer) error
	SubmitWork(SlaveServerSideOp_SubmitWorkServer) error
	// APIs for neighbor slaves
	AddXshardTxList(SlaveServerSideOp_AddXshardTxListServer) error
	BatchAddXshardTxList(SlaveServerSideOp_BatchAddXshardTxListServer) error
}

func RegisterSlaveServerSideOpServer(s *grpc.Server, srv SlaveServerSideOpServer) {
	s.RegisterService(&_SlaveServerSideOp_serviceDesc, srv)
}

func _SlaveServerSideOp_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).Ping(&slaveServerSideOpPingServer{stream})
}

type SlaveServerSideOp_PingServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpPingServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpPingServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpPingServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_ConnectToSlaves_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).ConnectToSlaves(&slaveServerSideOpConnectToSlavesServer{stream})
}

type SlaveServerSideOp_ConnectToSlavesServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpConnectToSlavesServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpConnectToSlavesServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpConnectToSlavesServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetMine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetMine(&slaveServerSideOpGetMineServer{stream})
}

type SlaveServerSideOp_GetMineServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetMineServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetMineServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetMineServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GenTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GenTx(&slaveServerSideOpGenTxServer{stream})
}

type SlaveServerSideOp_GenTxServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGenTxServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGenTxServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGenTxServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_AddRootBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).AddRootBlock(&slaveServerSideOpAddRootBlockServer{stream})
}

type SlaveServerSideOp_AddRootBlockServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpAddRootBlockServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpAddRootBlockServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpAddRootBlockServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetEcoInfoList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetEcoInfoList(&slaveServerSideOpGetEcoInfoListServer{stream})
}

type SlaveServerSideOp_GetEcoInfoListServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetEcoInfoListServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetEcoInfoListServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetEcoInfoListServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetNextBlockToMine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetNextBlockToMine(&slaveServerSideOpGetNextBlockToMineServer{stream})
}

type SlaveServerSideOp_GetNextBlockToMineServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetNextBlockToMineServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetNextBlockToMineServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetNextBlockToMineServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_AddMinorBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).AddMinorBlock(&slaveServerSideOpAddMinorBlockServer{stream})
}

type SlaveServerSideOp_AddMinorBlockServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpAddMinorBlockServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpAddMinorBlockServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpAddMinorBlockServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetUnconfirmedHeaders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetUnconfirmedHeaders(&slaveServerSideOpGetUnconfirmedHeadersServer{stream})
}

type SlaveServerSideOp_GetUnconfirmedHeadersServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetUnconfirmedHeadersServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetUnconfirmedHeadersServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetUnconfirmedHeadersServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetAccountData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetAccountData(&slaveServerSideOpGetAccountDataServer{stream})
}

type SlaveServerSideOp_GetAccountDataServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetAccountDataServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetAccountDataServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetAccountDataServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_AddTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).AddTransaction(&slaveServerSideOpAddTransactionServer{stream})
}

type SlaveServerSideOp_AddTransactionServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpAddTransactionServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpAddTransactionServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpAddTransactionServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_CreateClusterPeerConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).CreateClusterPeerConnection(&slaveServerSideOpCreateClusterPeerConnectionServer{stream})
}

type SlaveServerSideOp_CreateClusterPeerConnectionServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpCreateClusterPeerConnectionServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpCreateClusterPeerConnectionServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpCreateClusterPeerConnectionServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_DestroyClusterPeerConnectionCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).DestroyClusterPeerConnectionCommand(&slaveServerSideOpDestroyClusterPeerConnectionCommandServer{stream})
}

type SlaveServerSideOp_DestroyClusterPeerConnectionCommandServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpDestroyClusterPeerConnectionCommandServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpDestroyClusterPeerConnectionCommandServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpDestroyClusterPeerConnectionCommandServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetMinorBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetMinorBlock(&slaveServerSideOpGetMinorBlockServer{stream})
}

type SlaveServerSideOp_GetMinorBlockServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetMinorBlockServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetMinorBlockServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetMinorBlockServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetTransaction(&slaveServerSideOpGetTransactionServer{stream})
}

type SlaveServerSideOp_GetTransactionServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetTransactionServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetTransactionServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetTransactionServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_SyncMinorBlockList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).SyncMinorBlockList(&slaveServerSideOpSyncMinorBlockListServer{stream})
}

type SlaveServerSideOp_SyncMinorBlockListServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpSyncMinorBlockListServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpSyncMinorBlockListServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpSyncMinorBlockListServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_ExecuteTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).ExecuteTransaction(&slaveServerSideOpExecuteTransactionServer{stream})
}

type SlaveServerSideOp_ExecuteTransactionServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpExecuteTransactionServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpExecuteTransactionServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpExecuteTransactionServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetTransactionReceipt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetTransactionReceipt(&slaveServerSideOpGetTransactionReceiptServer{stream})
}

type SlaveServerSideOp_GetTransactionReceiptServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetTransactionReceiptServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetTransactionReceiptServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetTransactionReceiptServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetTransactionListByAddress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetTransactionListByAddress(&slaveServerSideOpGetTransactionListByAddressServer{stream})
}

type SlaveServerSideOp_GetTransactionListByAddressServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetTransactionListByAddressServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetTransactionListByAddressServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetTransactionListByAddressServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetLogs(&slaveServerSideOpGetLogsServer{stream})
}

type SlaveServerSideOp_GetLogsServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetLogsServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetLogsServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetLogsServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_EstimateGas_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).EstimateGas(&slaveServerSideOpEstimateGasServer{stream})
}

type SlaveServerSideOp_EstimateGasServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpEstimateGasServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpEstimateGasServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpEstimateGasServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetStorageAt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetStorageAt(&slaveServerSideOpGetStorageAtServer{stream})
}

type SlaveServerSideOp_GetStorageAtServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetStorageAtServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetStorageAtServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetStorageAtServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetCode(&slaveServerSideOpGetCodeServer{stream})
}

type SlaveServerSideOp_GetCodeServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetCodeServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetCodeServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetCodeServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GasPrice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GasPrice(&slaveServerSideOpGasPriceServer{stream})
}

type SlaveServerSideOp_GasPriceServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGasPriceServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGasPriceServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGasPriceServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_GetWork_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).GetWork(&slaveServerSideOpGetWorkServer{stream})
}

type SlaveServerSideOp_GetWorkServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpGetWorkServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpGetWorkServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpGetWorkServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_SubmitWork_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).SubmitWork(&slaveServerSideOpSubmitWorkServer{stream})
}

type SlaveServerSideOp_SubmitWorkServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpSubmitWorkServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpSubmitWorkServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpSubmitWorkServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_AddXshardTxList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).AddXshardTxList(&slaveServerSideOpAddXshardTxListServer{stream})
}

type SlaveServerSideOp_AddXshardTxListServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpAddXshardTxListServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpAddXshardTxListServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpAddXshardTxListServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SlaveServerSideOp_BatchAddXshardTxList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlaveServerSideOpServer).BatchAddXshardTxList(&slaveServerSideOpBatchAddXshardTxListServer{stream})
}

type SlaveServerSideOp_BatchAddXshardTxListServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type slaveServerSideOpBatchAddXshardTxListServer struct {
	grpc.ServerStream
}

func (x *slaveServerSideOpBatchAddXshardTxListServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slaveServerSideOpBatchAddXshardTxListServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SlaveServerSideOp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.SlaveServerSideOp",
	HandlerType: (*SlaveServerSideOpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _SlaveServerSideOp_Ping_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ConnectToSlaves",
			Handler:       _SlaveServerSideOp_ConnectToSlaves_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMine",
			Handler:       _SlaveServerSideOp_GetMine_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GenTx",
			Handler:       _SlaveServerSideOp_GenTx_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddRootBlock",
			Handler:       _SlaveServerSideOp_AddRootBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetEcoInfoList",
			Handler:       _SlaveServerSideOp_GetEcoInfoList_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetNextBlockToMine",
			Handler:       _SlaveServerSideOp_GetNextBlockToMine_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddMinorBlock",
			Handler:       _SlaveServerSideOp_AddMinorBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUnconfirmedHeaders",
			Handler:       _SlaveServerSideOp_GetUnconfirmedHeaders_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAccountData",
			Handler:       _SlaveServerSideOp_GetAccountData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddTransaction",
			Handler:       _SlaveServerSideOp_AddTransaction_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateClusterPeerConnection",
			Handler:       _SlaveServerSideOp_CreateClusterPeerConnection_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DestroyClusterPeerConnectionCommand",
			Handler:       _SlaveServerSideOp_DestroyClusterPeerConnectionCommand_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMinorBlock",
			Handler:       _SlaveServerSideOp_GetMinorBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTransaction",
			Handler:       _SlaveServerSideOp_GetTransaction_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncMinorBlockList",
			Handler:       _SlaveServerSideOp_SyncMinorBlockList_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecuteTransaction",
			Handler:       _SlaveServerSideOp_ExecuteTransaction_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTransactionReceipt",
			Handler:       _SlaveServerSideOp_GetTransactionReceipt_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTransactionListByAddress",
			Handler:       _SlaveServerSideOp_GetTransactionListByAddress_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLogs",
			Handler:       _SlaveServerSideOp_GetLogs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EstimateGas",
			Handler:       _SlaveServerSideOp_EstimateGas_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStorageAt",
			Handler:       _SlaveServerSideOp_GetStorageAt_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCode",
			Handler:       _SlaveServerSideOp_GetCode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GasPrice",
			Handler:       _SlaveServerSideOp_GasPrice_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetWork",
			Handler:       _SlaveServerSideOp_GetWork_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubmitWork",
			Handler:       _SlaveServerSideOp_SubmitWork_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddXshardTxList",
			Handler:       _SlaveServerSideOp_AddXshardTxList_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchAddXshardTxList",
			Handler:       _SlaveServerSideOp_BatchAddXshardTxList_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
